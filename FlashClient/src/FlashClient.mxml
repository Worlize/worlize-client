<?xml version="1.0" encoding="utf-8"?>
<s:Application
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:code="http://code.google.com/p/flexlib/"
	xmlns:view="com.worlize.interactivity.view.*"
	xmlns:local="*" xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:view1="com.worlize.view.*"
	xmlns:components="com.worlize.view.components.*"
	xmlns:visualnotification="com.worlize.components.visualnotification.*"
	minWidth="965" minHeight="640"
	skinClass="FlashClientApplicationSkin"
	applicationComplete="handleApplicationComplete()"
	creationComplete="handleCreationComplete()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	
	<fx:Style source="Styles.css" />
	<fx:Style source="src/com/worlize/view/skins/skins.css" />
 
	<fx:Script>
		<![CDATA[
			import com.worlize.components.visualnotification.VisualNotification;
			import com.worlize.control.Marketplace;
			import com.worlize.control.VirtualCurrencyProducts;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.event.InteractivityEvent;
			import com.worlize.interactivity.event.InteractivitySecurityErrorEvent;
			import com.worlize.interactivity.iptscrae.command.CLIENTTYPECommand;
			import com.worlize.interactivity.model.InteractivityUser;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.Directory;
			import com.worlize.model.friends.FriendsList;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			import com.worlize.state.AuthorModeState;
			import com.worlize.view.LockerWindow;
			import com.worlize.view.author.AuthorModePropertiesWindow;
			import com.worlize.view.windows.DirectoryWindow;
			import com.worlize.view.windows.FriendsWindow;
			import com.worlize.view.windows.GiftsWindow;
			import com.worlize.view.windows.WorldsWindow;
			
			import flash.net.navigateToURL;
			import flash.sampler.getInvocationCount;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			[Bindable]
			public var client:InteractivityClient = InteractivityClient.getInstance();
			
			[Bindable]
			private var worlizeUser:CurrentUser = CurrentUser.getInstance(); 

			private var preferences:Preferences = Preferences.getInstance();
			
			private var authorPropertiesWindowShowing:Boolean = false;
			private var authorPropertiesWindow:AuthorModePropertiesWindow;
			
			private var manualFriendsListState:String = null;
			
			[Bindable]
			private var logOutToolTip:String;
			
			private function handleApplicationComplete():void {
				trace("Application Domain: " + url);
				trace("Flash Player Version: " + Capabilities.version);
				stage.addEventListener(KeyboardEvent.KEY_DOWN, handleStageKeyDown);
				stage.addEventListener(Event.RESIZE, handleStageResize);
				updateFriendsListAutoDisplay();
				
				if (ExternalInterface.call('getFacebookLoginStatus')) {
					logOutToolTip = "Log out of Worlize and Facebook";
				}
				else {
					logOutToolTip = "Log out of Worlize";
				}
				
//				analytics.tracker.setDomainName(".worlize.com");
//				analytics.tracker.trackPageview("/enter");
			}
			
			private function handleStageResize(event:Event):void {
				updateFriendsListAutoDisplay();
			}
			
			private function handleStageKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.NUMPAD_ADD) {
					client.setFace(client.currentUser.face+1);
				}
				else if (event.keyCode == Keyboard.NUMPAD_SUBTRACT) {
					client.setFace(client.currentUser.face-1);
				}
			}

			private function handleCreationComplete():void {
				ExternalInterface.call('hideLoadingOverlay');
				
				client.addEventListener(InteractivityEvent.CONNECT_COMPLETE, handleConnectComplete);
				client.addEventListener(InteractivityEvent.CONNECT_FAILED, handleConnectFailed);
				client.addEventListener(InteractivityEvent.CONNECT_START, handleConnectStart);
				client.addEventListener(InteractivityEvent.GOTO_URL, handleGotoURL);
					
				client.setCyborg(preferences.cyborg);
				
				client.connect();
				
				authorPropertiesWindow = new AuthorModePropertiesWindow();
				authorPropertiesWindow.x = this.width - authorPropertiesWindow.width - 15;
				authorPropertiesWindow.y = 75;

				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorDisabled);
				NotificationCenter.addListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleAuthorSelectedItemChanged);
			}
			
			private var authorMode:Boolean = false;
			
			private function handleAuthorDisabled(notification:AuthorModeNotification):void {
				hideAuthorPropertiesWindow();
			}
			
			private function handleAuthorSelectedItemChanged(notification:AuthorModeNotification):void {
				if (!authorPropertiesWindowShowing && notification.newValue !== null) {
					showAuthorPropertiesWindow();
				}
				else {
					if (notification.newValue === null) {
						hideAuthorPropertiesWindow();
					}
				}
			}
			
			private function showAuthorPropertiesWindow():void {
				if (authorPropertiesWindow) {
					PopUpManager.addPopUp(authorPropertiesWindow, systemManager.getSandboxRoot());
					authorPropertiesWindowShowing = true;
				}
			}
			private function hideAuthorPropertiesWindow():void {
				if (authorPropertiesWindow && authorPropertiesWindowShowing) {
					PopUpManager.removePopUp(authorPropertiesWindow);
				}
				authorPropertiesWindowShowing = false;
			}
			
			
			private function handleGotoURL(event:InteractivityEvent):void {
				var url:String = event.url;
				Alert.show("Do you want to visit this url in your browser?\n\n" + event.url,
						   "External Link",
						   Alert.YES | Alert.NO,
						   null,
						   function(event:CloseEvent):void {
							  if (event.detail == Alert.YES) {
								  var req:URLRequest = new URLRequest(url);
								  navigateToURL(req, "_BLANK");
							  }
						   });
			}
			
			private function handleConnectComplete(event:InteractivityEvent):void {
				if (AuthorModeState.getInstance().enabled) {
					chatWindow.currentState = "authormode";
				}
				else {
					chatWindow.currentState = "connected";
				}
			}
			
			private function handleConnectFailed(event:InteractivityEvent):void {
				Alert.show(event.text, "Error");
				chatWindow.currentState = "disconnected"
			}
			
			private function handleConnectStart(event:InteractivityEvent):void {
				chatWindow.currentState = "connecting";
			}
			
			private function disconnect():void {
				client.disconnect();
			}
			
			private function handleFriendsClick():void {
				FriendsWindow.open(systemManager.getSandboxRoot());
			}
			
			private function handleGiftsClick():void {
				var point:Point = new Point(giftsButton.x, giftsButton.y);
				var globalPoint:Point = topButtonBar.localToGlobal(point);
				GiftsWindow.open(systemManager.getSandboxRoot(), globalPoint.x, globalPoint.y + giftsButton.height);
			}
			
			private function handleDirectoryClick():void {
				DirectoryWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function showComingSoon(message:String):void {
				var notification:VisualNotification = new VisualNotification(message, "Hang tight!");
				notification.show();
			}
			
			private function openMarketplace():void {
				if (Marketplace.marketplaceEnabled) {
					Marketplace.open();
				}
				else {
					showComingSoon("You will soon be able to buy premium backgrounds, avatars, and objects in the Marketplace!");
				}
			}
			
			private function showVirtualCurrencyProducts():void {
				VirtualCurrencyProducts.show();
			}
			
			private function handleAvatarsClick():void {
				LockerWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function verifySufficientRoomForFriendsList():Boolean {
				return (stage.width > chatWindow.x + chatWindow.width + friendsListPanel.width);
			}
			
			private function handleFriendsButtonChange(event:Event):void {
				if (ToggleButton(event.target).selected) {
					showFriendsList();
					if (verifySufficientRoomForFriendsList()) {
						manualFriendsListState = null;
					}
					else {
						manualFriendsListState = "open";
					}
				}
				else {
					hideFriendsList();
					manualFriendsListState = "closed";
				}
			}
			
			private function updateFriendsListAutoDisplay():void {
				if (manualFriendsListState === null) {
					if (verifySufficientRoomForFriendsList()) {
						if (!friendsListPanel.visible) {
							showFriendsList();
						}
					}
					else {
						if (friendsListPanel.visible) {
							hideFriendsList();
						}
					}					
				}
			}
			
			private function showFriendsList():void {
				friendsListPanel.visible = true;
				friendsListToggleButton.selected = true;
			}
			
			private function hideFriendsList():void {
				friendsListPanel.visible = false;
				friendsListToggleButton.selected = false;
			}
			
			protected function handleLogoutClick(event:MouseEvent):void
			{
				var message:String = "Are you sure you want to log out of Worlize?";
				if (ExternalInterface.call('getFacebookLoginStatus') as Boolean) {
					message = "Are you sure you want to log out of Worlize and Facebook?";
				}
				Alert.show(message,
						   "Logout",
						   Alert.YES | Alert.NO,
						   null,
						   function(event:CloseEvent):void {
							   if (event.detail == Alert.YES) {
								   ExternalInterface.call("logout");
							   }
						   },
						   null,
						   Alert.NO);
			}
			
			private function handleForumsClick(event:MouseEvent):void {
				var request:URLRequest = new URLRequest("https://forums.worlize.com/");
				navigateToURL(request, "_blank");
			}
			
		]]>
	</fx:Script>

	
	<view1:ChatWindow id="chatWindow" client="{client}" top="40" left="10" />	

	<s:HGroup top="3" left="10" right="10" gap="15" verticalAlign="middle">
		
		<s:BorderContainer
			id="topButtonBar"
			tabChildren="false"
			height="25"
			borderVisible="false"
			backgroundColor="#FFFFFF" cornerRadius="12">
			<s:layout>
				<s:HorizontalLayout gap="20"
									paddingTop="1"
									paddingLeft="3"
									paddingRight="-1" />
			</s:layout>
			
			<mx:LinkButton
				styleName="topNavButton"
				color="#0C9dea"
				icon="@Embed(source='src/assets/icons/icon_myworlz.png')"
				click="handleDirectoryClick()"
				label="DIRECTORY" />
			<mx:LinkButton
				styleName="topNavButton"
				color="#F15601"
				icon="@Embed(source='src/assets/icons/icon_avatar.png')"
				click="handleAvatarsClick()"
				label="AVATARS" />
			<mx:LinkButton
				id="giftsButton"
				styleName="topNavButton"
				color="#9e1F63"
				icon="@Embed(source='src/assets/icons/icon_gifts.png')"
				click="handleGiftsClick()"
				label="GIFTS" />
		</s:BorderContainer>
		
		<s:HGroup
			verticalAlign="middle"
			tabChildren="false"
			gap="12">
			
			<components:CapacityButton
				line1="Coins: {worlizeUser.coins}"
				line2="Bucks: {worlizeUser.bucks}"
				toolTip="Click to add coins or bucks"
				click="showVirtualCurrencyProducts();"
				/>
			<!--
			<mx:LinkButton
				styleName="topNavButton"
				color="#B58B0B"
				icon="@Embed(source='src/assets/icons/icon_marketplace.png')"
				click="openMarketplace()"
				label="Marketplace" />
			-->
		</s:HGroup>

	</s:HGroup>
	
	<s:HGroup right="0" top="0" height="40" gap="0" verticalAlign="middle">
		<mx:LinkButton label="FORUMS"
					   height="100%"
					   styleName="topNavButtonRight forumsButton"
					   color="#333333"
					   toolTip="Submit feature requests or get help from the community in the forums."
					   click="handleForumsClick(event)"/>
		<mx:LinkButton label="LOG OUT"
					   height="100%"
					   styleName="topNavButtonRight logOutButton"
					   color="#333333"
					   toolTip="{logOutToolTip}"
					   click="handleLogoutClick(event)"/>
		<s:ToggleButton label="FRIENDS"
						id="friendsListToggleButton"
						height="100%"
						icon="@Embed(source='src/assets/icons/icon_friends.png')"
						styleName="friendsListToggleButton"
						toolTip="Find and invite your friends"
						change="handleFriendsButtonChange(event)" />
	</s:HGroup>
	
	<view1:FriendsListPanel id="friendsListPanel" visible="false"
							friendsList="{FriendsList.getInstance()}"
							top="40" right="0" bottom="0" width="250" />
	
	<visualnotification:VisualNotifier id="visualNotifier" top="20" left="0" right="0" bottom="0" />
	
</s:Application>
