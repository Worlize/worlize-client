<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5"
			 >
    <fx:Metadata>[HostComponent("com.worlize.components.visualnotification.VisualNotificationDisplay")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        <![CDATA[         
			import mx.rpc.xml.QualifiedResourceManager;
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
	
	<s:transitions>
		<s:Transition fromState="up" toState="over">
			<s:Fade duration="150" target="{outlineStroke}" />
		</s:Transition>
		<s:Transition fromState="over" toState="up">
			<s:Fade duration="150" target="{outlineStroke}" />
		</s:Transition>
	</s:transitions>
	
	<s:filters>
		<s:DropShadowFilter
					alpha="0.55"
					color="#222222"
					blurX="14" blurY="14"
					quality="2"
					distance="1"
					angle="90" />
	</s:filters>
	
	<!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="0" right="0" top="0" bottom="0" radiusX="10">
        <s:fill>
            <s:SolidColor color="#222222" alpha="0.9" />
        </s:fill>
    </s:Rect>
	        
    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="9">
		<s:stroke>
			<s:SolidColorStroke id="outlineStroke"
								color="#EEEEEE"
								alpha.up="0" alpha.over="1"
								pixelHinting="false"
								weight="3" />
		</s:stroke>
    </s:Rect>
    
    <!-- layer 8: text -->
	<s:VGroup gap="5"
			  left="15" right="15" bottom="15" top="15">
		<s:Label id="titleTextDisplay"
				 text="{hostComponent.notification.title}"
				 color="#EEEEEE"
				 maxWidth="300"
				 textAlign="left"
				 fontFamily="Arial"
				 fontSize="15"
				 fontWeight="bold"
				 verticalAlign="middle"
				 maxDisplayedLines="2">
		</s:Label>
		
		<s:Label id="textDisplay"
				 text="{hostComponent.notification.text}"
				 includeInLayout="{hostComponent.notification.text &amp;&amp; hostComponent.notification.text.length > 0}"
				 color="#EEEEEE"
				 maxWidth="300"
				 textAlign="justify"
				 fontFamily="Arial"
				 fontSize="13"
				 fontWeight="normal"
				 verticalAlign="middle"
				 maxDisplayedLines="10">
		</s:Label>
	</s:VGroup>
	
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    
</s:SparkSkin>
