<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 currentState="loading"
		 creationComplete="handleCreationComplete()" xmlns:moderation="com.worlize.view.moderation.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="loading" />
		<s:State name="normal" />
		<s:State name="noModerators" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.command.LoadModeratorListCommand;
			import com.worlize.interactivity.model.InteractivityUser;
			import com.worlize.interactivity.model.UserPermission;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.WorldDefinition;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.rpc.events.FaultEvent;
			
			private var logger:ILogger = Log.getLogger("com.worlize.view.moderation.ModeratorsTab");
			
			[Bindable]
			private var _world:WorldDefinition;
			
			[Bindable]
			private var client:InteractivityClient = InteractivityClient.getInstance();
			
			[Bindable(event="worldChanged")]
			public function set world(newValue:WorldDefinition):void {
				if (_world !== newValue) {
					_world = newValue;
					dispatchEvent(new FlexEvent('worldChanged'));
					loadData();
				}
			}
			public function get world():WorldDefinition {
				return _world;
			}
			
			private function handleCreationComplete():void {
				
			}
						
			public function loadData():void {
				if (world === null) { return; }
				var cmd:LoadModeratorListCommand = new LoadModeratorListCommand();
				cmd.addEventListener(WorlizeResultEvent.RESULT, handleLoadComplete);
				cmd.execute(world);
			}
			
			private function handleLoadComplete(event:WorlizeResultEvent):void {
				if (world.moderators.length === 0) {
					currentState = "noModerators";
				}
				else {
					currentState = "normal";
				}
			}
			
			private function removeSelectedUser():void {
				var serviceClient:WorlizeServiceClient = new WorlizeServiceClient();
				serviceClient.addEventListener(WorlizeResultEvent.RESULT, handleRemoveSelectedUserResult);
				serviceClient.addEventListener(FaultEvent.FAULT, handleRemoveSelectedUserFault);
				serviceClient.send(
					"/worlds/" + world.guid + "/moderators/" + moderatorList.selectedItem.id,
					HTTPMethod.DELETE
				);
			}
			
			private function handleRemoveSelectedUserResult(event:WorlizeResultEvent):void {
				if (event.resultJSON && event.resultJSON.success) {
					for (var i:int = 0; i < world.moderators.length; i ++) {					
						var moderator:InteractivityUser = world.moderators.getItemAt(i) as InteractivityUser;
						if (moderator.id === event.resultJSON.removed_moderator_guid) {
							world.moderators.removeItemAt(i);
							break;
						}
					}
					if (world.moderators.length === 0) {
						currentState = "noModerators";
					}
				}
				else {
					Alert.show("Unable to remove user:\n" + event.resultJSON.error.message);
				}
			}
			
			private function handleRemoveSelectedUserFault(event:FaultEvent):void {
				Alert.show("Unable to remove user. HTTP Status " + event.statusCode);
				logger.error("Unable to remove user. HTTP Status " + event.statusCode + " Message: " + event.message);
				currentState = "normal";
			}
		]]>
	</fx:Script>
	
	<s:Label includeIn="loading"
			 color="#666666" fontFamily="PTSansNarrowBold"
			 fontSize="24" verticalCenter="0"
			 width="100%" textAlign="center"
			 paddingRight="50" paddingLeft="50"
			 text="Loading..." />
	
	<s:VGroup includeIn="noModerators" width="100%"
			 verticalCenter="0">
		<s:Label color="#666666" fontFamily="PTSansNarrowBold"
				 fontSize="24" width="100%" textAlign="center"
				 paddingRight="50" paddingLeft="50"
				 text="There are no moderators." />
		<s:Label color="#666666" fontFamily="PTSansNarrowBold"
				 fontSize="24" width="100%" textAlign="center"
				 paddingRight="50" paddingLeft="50"
				 text="Click a friend's avatar to make them a moderator." />
	</s:VGroup>
	
		
	
	<s:HGroup width="100%" height="100%" includeIn="normal">
		<s:VGroup height="100%">
			<s:List dataProvider="{world.moderators}"
					selectedIndex="1"
					id="moderatorList"
					labelField="name"
					width="200"
					height="100%" />
			<s:HGroup width="100%">
				<s:Button label="-" width="30"
						  toolTip="Remove selected user from list of moderators."
						  enabled="{moderatorList.selectedItem &amp;&amp; client.currentUser &amp;&amp; client.currentUser.hasPermission(UserPermission.CAN_GRANT_PERMISSIONS)}"
						  click="removeSelectedUser()" />
			</s:HGroup>
		</s:VGroup>
		
		<moderation:UserPermissionsEditor user="{moderatorList.selectedItem}"
										  allowEditing="{client.currentUser &amp;&amp; client.currentUser.hasPermission(UserPermission.CAN_GRANT_PERMISSIONS)}"
										  width="100%" height="100%" />
	</s:HGroup>
	
</s:Group>
