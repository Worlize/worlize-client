<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="com.worlize.view.components.*"
		 xmlns:code="http://code.google.com/p/flexlib/"
		 xmlns:layout="flexlib.scheduling.scheduleClasses.layout.*"
		 xmlns:controls="controls.*"
		 creationComplete="handleCreationComplete(event)">

	<s:states>
		<s:State name="normal" />
		<s:State name="loading" />
	</s:states>
	
	<!-- titleBarColor="#1076a4" -->
	<fx:Script>
		<![CDATA[
			import com.worlize.components.visualnotification.VisualNotification;
			import com.worlize.event.FriendsListEvent;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.friends.FriendsList;
			import com.worlize.model.friends.FriendsListEntry;
			import com.worlize.model.friends.OnlineFacebookFriend;
			import com.worlize.model.friends.PendingFriendsListEntry;
			import com.worlize.notification.FriendsNotification;
			import com.worlize.view.itemrenderers.ListHeadingItemRenderer;
			import com.worlize.view.itemrenderers.friends.FriendListItemRenderer;
			import com.worlize.view.itemrenderers.friends.OnlineFacebookFriendItemRenderer;
			import com.worlize.view.itemrenderers.friends.PendingFriendInvitationItemRenderer;
			import com.worlize.view.skins.DynamicHeightListSkin;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			import spark.skins.spark.DefaultItemRenderer;
			
			private var _friendsList:FriendsList;
			
			[Bindable(event="friendsListChange")]
			public function set friendsList(newValue:FriendsList):void {
				if (_friendsList !== newValue) {
					if (_friendsList) {
						_friendsList.removeEventListener('stateChange', handleFriendsListStateChange);
					}
					_friendsList = newValue;
					if (_friendsList) {
						_friendsList.addEventListener('stateChange', handleFriendsListStateChange);
						if (friendsList.state == FriendsList.STATE_LOADING) {
							currentState = 'loading';
						}
						else {
							currentState = 'normal';
						}
					}
					dispatchEvent(new FlexEvent("friendsListChange"));
				}
			}
			public function get friendsList():FriendsList {
				return _friendsList;
			}
			
			private function handleFriendsListStateChange(event:Event):void {
				if (friendsList.state == FriendsList.STATE_LOADING) {
					currentState = 'loading';
				}
				else {
					currentState = 'normal';
				}
			}
			
			private function inviteFacebookFriends():void {
				var fbFriendIds:Array = [];
				for (var i:int=0; i < friendsList.friendsForFriendsList.length; i++) {
					var item:Object = friendsList.friendsForFriendsList.getItemAt(i);
					if (!(item is FriendsListEntry)) {
						continue;
					}
					var friend:FriendsListEntry = item as FriendsListEntry;
					if (friend.friendType === FriendsListEntry.TYPE_FACEBOOK) {
						fbFriendIds.push(friend.facebookId);
					}
				}
				
				ExternalInterface.call('showFacebookDialog', {
					method: 'apprequests',
					message: "Come chat with me in Worlize, a place where you can create your own virtual world and chat with your friends!",
					exclude_ids: fbFriendIds,
					filters: ['all'],
					title: 'Invite Friends to Worlize',
					data: JSON.stringify({
						action: 'join',
						inviter_guid: CurrentUser.getInstance().guid
					})
				});
			}
			
			private function selectItemRenderer(item:Object):ClassFactory {
				var classFactory:ClassFactory;
				if (item is FriendsListEntry) {
					classFactory = new ClassFactory(FriendListItemRenderer);
				}
				else if (item is PendingFriendsListEntry) {
					classFactory = new ClassFactory(PendingFriendInvitationItemRenderer);
				}
				else if (item is OnlineFacebookFriend) {
					classFactory = new ClassFactory(OnlineFacebookFriendItemRenderer);
				}
				else if (item['isHeader']) {
					classFactory = new ClassFactory(ListHeadingItemRenderer);
				}
				else {
					classFactory = new ClassFactory(DefaultItemRenderer);
				}
				return classFactory;
			}
			
			protected function handleFriendListChanging(event:IndexChangeEvent):void
			{
				var list:List = event.target as List;
				if (event.newIndex > -1 && event.newIndex < list.dataProvider.length) {
					var item:Object = list.dataProvider.getItemAt(event.newIndex);
					
					if (item is FriendsListEntry) {
						var friend:FriendsListEntry = item as FriendsListEntry;
						if (friend.online) {
							friend.gotoLocation()
						}
						else {
							InteractivityClient.getInstance().gotoRoom(friend.worldEntrance);
						}
					}
					
					if (item is OnlineFacebookFriend) {
						var onlineFacebookFriend:OnlineFacebookFriend = item as OnlineFacebookFriend;
						onlineFacebookFriend.invite();
					}
					
					// Prevent headings from being selected
					if ('selectionEnabled' in item && item['selectionEnabled'] == false) {
						event.preventDefault();
					}
				}
				
				// nothing is selectable
				event.preventDefault();
			}
			
			protected function handleCreationComplete(event:FlexEvent):void
			{
				NotificationCenter.addListener(FriendsNotification.FRIEND_ADDED, handleFriendAddedNotification);
				NotificationCenter.addListener(FriendsNotification.FRIEND_REMOVED, handleFriendRemovedNotification);
			}
			
			private function handleFriendAddedNotification(event:FriendsNotification):void {
				if (!this.visible) {
					var message:String;
					if (event.friendsListEntry.friendType === FriendsListEntry.TYPE_FACEBOOK) {
						message = event.friendsListEntry.username + " has been added to your friends list because they are your friend on Facebook.";
					}
					else {
						message = event.friendsListEntry.username + " has been added to your friends list!";
					}
					var notification:VisualNotification = new VisualNotification(message, "New Friend!");
					notification.show();
				}
			}
			
			private function handleFriendRemovedNotification(event:FriendsNotification):void {
				if (!this.visible) {
					var notification:VisualNotification = new VisualNotification(
						event.friendsListEntry.username + " has been removed from your friends list.",
						"Friend Removed"
					);
					notification.show();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:filters>
		<s:GlowFilter blurX="4" blurY="4" alpha="0.47" color="#000000" quality="{BitmapFilterQuality.MEDIUM}" />
	</s:filters>
	
	<!-- White Background -->
	<s:Rect left="0" top="0" right="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#FFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup left="0" top="0" bottom="0" right="0" gap="0">
		<s:Rect width="100%" height="10">
			<s:fill>
				<s:SolidColor color="#3091c3" />
			</s:fill>
		</s:Rect>
		
		<!-- Social Conncetion Callout -->
		<s:Group width="100%" height="39" buttonMode="true" click="inviteFacebookFriends()">
			<s:layout>
				<s:BasicLayout />
			</s:layout>
			<s:Rect top="0" left="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor color="#DAEEF7" />
				</s:fill>
			</s:Rect>
			<s:HGroup verticalCenter="0" horizontalCenter="0"
					  verticalAlign="middle" horizontalAlign="center">
				<s:Label text="invite your friends:" styleName="socialCallout" />
				<s:Image source="@Embed(source='assets/icons/social/fb-30.png')" />
			</s:HGroup>
		</s:Group>
		
		<s:Group width="100%" height="100%" includeIn="loading">
			<controls:Spinner id="loadingSpinner"
							  autoPlay="true"
							  mouseEnabled="false"
							  mouseChildren="false"
							  size="44" numTicks="13"
							  tickWidth="3" speed="600"
							  horizontalCenter="0"
							  top="30"
							  fadeSpeed="500" tickColor="#222222" />
		</s:Group>
		
		<s:VGroup width="100%" height="100%" gap="0" includeIn="normal">
			
			<s:VGroup width="100%" height="100%" gap="0"
					  visible="{friendsList.friendsForFriendsList.length > 0}"
					  includeInLayout="{friendsList.friendsForFriendsList.length > 0}">
				
				
				<s:List
					id="friendListDisplay"
					width="100%"
					height="100%"
					dataProvider="{friendsList.friendsForFriendsList}"
					borderVisible="false"
					tabEnabled="false"
					changing="handleFriendListChanging(event)"
					itemRendererFunction="{selectItemRenderer}" />
			</s:VGroup>
			
			<s:VGroup width="100%" height="100"
					  visible="{friendsList.friendsForFriendsList.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  includeInLayout="{friendsList.friendsForFriendsList.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  verticalAlign="middle"
					  horizontalAlign="center">
				<s:Label fontFamily="PTSansNarrowBold"
						 fontSize="18"
						 color="#555555"
						 text="You have no friends" />
				<s:Label fontFamily="Arial"
						 fontSize="11"
						 fontStyle="italic"
						 color="#666666"
						 text="(Why not invite some?)" />
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
</s:Group>
