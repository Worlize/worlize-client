<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" height="21"
		 initialize="handleInitialize()"
		 addedToStage="handleAddedToStage(event)"
		 removedFromStage="handleRemovedFromStage(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import com.worlize.interactivity.model.WebcamBroadcastManager;
		import com.worlize.interactivity.rpc.InteractivityClient;

		[Bindable]
		private var manager:WebcamBroadcastManager = InteractivityClient.getInstance().webcamBroadcastManager;
		
		private var muteTimer:Timer = new Timer(300, 1);
		
		private function handleInitialize():void {
			muteTimer.addEventListener(TimerEvent.TIMER, handleMuteTimer);
		}
		
		private function handleMouseDown(event:MouseEvent):void {
			systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
			manager.unmuteMic();
		}
		
		private function handleStageMouseUp(event:MouseEvent):void {
			systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
			muteTimer.reset();
			muteTimer.start();
		}
		
		private function handleAddedToStage(event:Event):void {
			systemManager.getSandboxRoot().addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
		}
		
		private function handleRemovedFromStage(event:Event):void {
			systemManager.getSandboxRoot().removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
		}
		
		private function handleMuteTimer(event:TimerEvent):void {
			manager.muteMic();
		}
		
		private function handleKeyDown(event:KeyboardEvent):void {
			if (manager.broadcasting && manager.micMuted) {
				if (event.keyCode === Keyboard.PAGE_DOWN || event.keyCode === Keyboard.F6) {
					systemManager.getSandboxRoot().addEventListener(KeyboardEvent.KEY_UP, handleStageKeyUp);
					manager.unmuteMic();
					return;
				}
			}
		}
		
		private function handleStageKeyUp(event:KeyboardEvent):void {
			if (manager.broadcasting) {
				if (event.keyCode === Keyboard.PAGE_DOWN || event.keyCode === Keyboard.F6) {
					systemManager.getSandboxRoot().removeEventListener(KeyboardEvent.KEY_UP, handleStageKeyUp);
					if (!manager.micMuted) {
						muteTimer.reset();
						muteTimer.start();
					}
				}
			}
		}
		
		protected function handleToggleButtonKeyUp(event:KeyboardEvent):void {
			if (event.keyCode === Keyboard.SPACE || event.keyCode === Keyboard.ENTER) {
				if (manager.micMuted) {
					manager.unmuteMic();
				}
				else {
					muteTimer.reset();
					muteTimer.start();
				}				
			}
		}
		
		protected function handleToggleButtonChange(event:Event):void {
			ptt.selected = !manager.micMuted;
		}
		
	]]>
	</fx:Script>

	<s:layout>
		<s:HorizontalLayout />
	</s:layout>
	
	<s:ToggleButton label="{ptt.selected ? 'Talking' : 'Push to Talk'}"
					width="98"
					buttonMode="true"
					styleName="pushToTalkButton"
					id="ptt" selected="{!manager.micMuted}"
					mouseDown="handleMouseDown(event)"
					keyUp="handleToggleButtonKeyUp(event)"
					change="handleToggleButtonChange(event)" />
	
</s:Group>
