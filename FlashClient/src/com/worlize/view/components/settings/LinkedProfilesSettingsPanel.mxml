<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="handleCreationComplete(event)"
		 addedToStage="handleAddedToStage()"
		 removedFromStage="handleRemovedFromStage()">
	
	<fx:Script>
		<![CDATA[
			import com.worlize.model.CurrentUser;
			import com.worlize.model.LinkedProfile;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			
			[Bindable]
			public var twitterConnected:Boolean = false;
			
			[Bindable]
			public var facebookConnected:Boolean = false;
			
			[Bindable]
			public var facebookProfile:LinkedProfile;
			
			[Bindable]
			public var twitterProfile:LinkedProfile;
			
			[Bindable]
			public var user:CurrentUser;
			
			protected function handleCreationComplete(event:FlexEvent):void {
				
			}
			
			public function initData():void {
				user = CurrentUser.getInstance();
				updateProfileStatus();
			}
			
			protected function updateProfileStatus():void {
				var twitter:Boolean = false;
				var facebook:Boolean = false;
				
				for (var i:int = 0; i < user.linkedProfiles.length; i++) {
					var profile:LinkedProfile = LinkedProfile(user.linkedProfiles.getItemAt(i));
					if (profile.provider === LinkedProfile.TWITTER) {
						twitterProfile = profile;
						twitter = true;
					}
					else if (profile.provider === LinkedProfile.FACEBOOK) {
						facebookProfile = profile;
						facebook = true;
					}
				}
				
				twitterConnected = twitter;
				facebookConnected = facebook;
			}
			
			protected function handleRemovedFromStage():void {
				if (user) {
					user.linkedProfiles.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleLinkedProfilesChanged);
				}
			}
			
			protected function handleAddedToStage():void {
				initData();
				user.linkedProfiles.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleLinkedProfilesChanged);
			}
			
			protected function handleLinkedProfilesChanged(event:Event):void {
				updateProfileStatus();
			}
			
			protected function connectAccount(provider:String):void {
				ExternalInterface.call('launchCenteredPopup', "/popup_auth/" + provider, 990, 600);
			}
			
			protected function disconnectAccount(provider:String):void {
				var capitalized:String = provider.charAt(0).toUpperCase() + provider.slice(1);
				Alert.show("Are you sure you want to unlink your " + capitalized +
							" account?  You will no longer be able to use " + capitalized +
							" to log into Worlize!",
						   "Unlink " + capitalized + " account",
						   Alert.YES | Alert.NO,
						   null,
				           function(event:CloseEvent):void {
							   if (event.detail === Alert.YES) {
								   var client:WorlizeServiceClient = new WorlizeServiceClient();
								   client.addEventListener(WorlizeResultEvent.RESULT, handleResult);
								   client.addEventListener(FaultEvent.FAULT, handleFault);
								   client.send("/authentications/" + provider + ".json", HTTPMethod.DELETE);
							   }
						   },
						   null,
						   Alert.NO);
			}
			
			protected function handleResult(event:WorlizeResultEvent):void {
				
			}
			
			protected function handleFault(event:FaultEvent):void {
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Group top="30" width="100%">
		<s:layout>
			<s:VerticalLayout gap="20" horizontalAlign="center" />
		</s:layout>
		
		<s:HGroup id="facebookAuthenticationGroup" width="500">
			<s:Image width="104" height="100" smooth="true"
					 source="{facebookConnected ? '/images/socialicons/facebook-connected.jpg' : '/images/socialicons/facebook-not-connected.jpg'}" />
			<s:VGroup width="100%" height="100%" paddingTop="5">
				<s:VGroup width="100%">
					<s:Label text="Facebook Account:"
							 fontWeight="bold" />
					<s:Label width="100%"
							 visible="{facebookConnected}" includeInLayout="{facebookConnected}"
							 text="{facebookProfile.displayName}" />
				</s:VGroup>
				<s:Button visible="{facebookConnected}"
						  includeInLayout="{facebookConnected}"
						  click="disconnectAccount('facebook')"
						  label="Unlink Account" />
				<s:Button visible="{!facebookConnected}"
						  includeInLayout="{!facebookConnected}"
						  click="connectAccount('facebook')"
						  label="Link Account" />
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup id="twitterAuthenticationGroup" width="500" horizontalAlign="center">
			<s:Image width="104" height="100" smooth="true"
					 source="{twitterConnected ? '/images/socialicons/twitter-connected.jpg' : '/images/socialicons/twitter-not-connected.jpg'}" />
			<s:VGroup width="100%" height="100%" paddingTop="5">
				<s:VGroup width="100%">
					<s:Label text="Twitter Account:"
							 fontWeight="bold" />
					<s:Label width="100%"
							 visible="{twitterConnected}" includeInLayout="{twitterConnected}"
							 text="{twitterProfile.displayName}" />
				</s:VGroup>
				<s:Button visible="{twitterConnected}"
						  includeInLayout="{twitterConnected}"
						  click="disconnectAccount('twitter')"
						  label="Unlink Account" />
				<s:Button visible="{!twitterConnected}"
						  click="connectAccount('twitter')"
						  includeInLayout="{!twitterConnected}"
						  label="Link Account" />
			</s:VGroup>
		</s:HGroup>	
	</s:Group>
</s:Group>
