<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  currentState="normal"
		  creationComplete="handleCreationComplete()"
		  width="100%" xmlns:validation="com.worlize.validation.*">
	<fx:Metadata>
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.DateUtil;
			import com.worlize.command.ChangePasswordCommand;
			import com.worlize.model.CurrentUser;
			import com.worlize.rpc.WorlizeResultEvent;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			private var _passwordChangedAt:Date;
			
			[Bindable]
			public var user:CurrentUser;
			
			[Bindable]
			private var changePasswordCommand:ChangePasswordCommand = new ChangePasswordCommand();
			
			[Bindable(event="passwordChangedAtChanged")]
			public function set passwordChangedAt(newValue:Date):void {
				_passwordChangedAt = newValue;
				dispatchEvent(new FlexEvent("passwordChangedAtChanged"));
			}
			
			public function get passwordChangedAt():Date {
				return _passwordChangedAt;
			}
			
			[Bindable(event="passwordChangedAtChanged")]
			public function get lastChangedAtString():String {
				if (_passwordChangedAt === null) {
					return "(Not set)";
				}
				return "(Last changed " + dateFormatter.format(_passwordChangedAt) + ")";
			}
			
			[Bindable]
			private var passwordFieldValid:Boolean = false;
			
			[Bindable]
			private var passwordConfirmationFieldValid:Boolean = false;
			
			protected function handleCreationComplete():void {
				changePasswordCommand.addEventListener(WorlizeResultEvent.RESULT, handleChangePasswordResult);
			}
			
			protected function handleChangePasswordResult(event:WorlizeResultEvent):void {
				if (event.resultJSON.success) {
					user.passwordChangedAt = DateUtil.parseW3CDTF(event.resultJSON.password_changed_at);
					currentState = "normal";
				}
			}
			
			protected function handleChangePasswordClick(event:MouseEvent):void {
				currentState='changing';
				passwordField.text = "";
				passwordConfirmationField.text = "";
			}
			
			protected function handleCancelClick(event:MouseEvent):void {
				currentState = "normal";
			}
			
			protected function handleSetPasswordClick(event:MouseEvent):void {
				changePasswordCommand.execute(passwordField.text);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DateTimeFormatter id="dateFormatter" dateStyle="medium" timeStyle="short" />
		
		<mx:StringValidator id="passwordValidator"
							source="{passwordField}" property="text"
							invalid="passwordFieldValid = false"
							valid="passwordFieldValid = true"
							required="true"
							requiredFieldError="Your password cannot be blank."
							tooShortError="Your password must be at least 4 characters long."
							tooLongError="Your password can only be 50 characters long."
							minLength="4" maxLength="50" />
		
		<validation:MatchValidator invalid="passwordConfirmationFieldValid = false"
								   valid="passwordConfirmationFieldValid = true"
								   matchSource="{passwordField}" matchProperty="text"
								   source="{passwordConfirmationField}" property="text"
								   noMatchError="Passwords must match." />
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="changing" />
	</s:states>
	
	<s:Form width="100%" includeIn="normal" top="-20">
		<s:FormItem label="Password">
			<s:layout>
				<s:HorizontalLayout verticalAlign="baseline" />
			</s:layout>
			<s:Label text="{lastChangedAtString}" />
			<s:Button label="Change Password" click="handleChangePasswordClick(event)" />
		</s:FormItem>
	</s:Form>
	
	<s:Form width="100%" includeIn="changing" top="-20">
		<s:layout>
			<s:FormLayout gap="-15" />
		</s:layout>
		<s:FormHeading label="Change Your Password" />
		<s:FormItem label="New Password">
			<s:TextInput id="passwordField" displayAsPassword="true" width="200"/>
			<s:helpContent>
				<s:Label width="100%" text="Longer is better, multiple words is easier to remember." />
			</s:helpContent>
		</s:FormItem>
		<s:FormItem label="Confirm Password">
			<s:TextInput id="passwordConfirmationField" displayAsPassword="true" width="200" />
		</s:FormItem>
		<s:FormItem>
			<s:HGroup width="200" horizontalAlign="right" verticalAlign="baseline">
				<s:Button label="Cancel"
						  click="handleCancelClick(event)" />
				<s:Button label="Set Password"
						  emphasized="true"
						  click="handleSetPasswordClick(event)"
						  enabled="{changePasswordCommand.state !== ChangePasswordCommand.STATE_LOADING &amp;&amp; passwordFieldValid &amp;&amp; passwordConfirmationFieldValid}" />
			</s:HGroup>
		</s:FormItem>
	</s:Form>
</s:Group>
