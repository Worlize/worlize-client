<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  creationComplete="handleCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.control.BackgroundUploader;
			import com.worlize.control.Uploader;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.BackgroundImageAsset;
			import com.worlize.model.BackgroundImageInstance;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.locker.BackgroundsLocker;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			import com.worlize.view.itemrenderers.BackgroundLockerItemRenderer;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;
			
			private var logger:ILogger = Log.getLogger("com.worlize.view.author.MyBackgroundsWindow");
			
			[Bindable]
			private var uploader:BackgroundUploader = new BackgroundUploader();
			
			[Bindable]
			private var backgroundsLocker:BackgroundsLocker = new BackgroundsLocker();
			
			
			private function handleCreationComplete():void {
				backgroundsLocker.load();
			}
			
			private function uploadBackground():void {
				if (backgroundsLocker.emptySlots > 0) {
					uploader.browse();
				}
				else {
					Alert.show(
						"You don't have enough space!  You'll have to get rid of some existing backgrounds or buy some more space.  Would you like to buy some more space now?",
						"Curses! Foiled again!",
					    Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								BuyStorageSpaceWindow.open('background', systemManager.getSandboxRoot());
							}
						}
					); 
				}
			}
			
			private function handleBackgroundChange(event:IndexChangeEvent):void {
				var backgroundInstance:BackgroundImageInstance = backgroundImagesList.selectedItem;
				var roomId:String = InteractivityClient.getInstance().currentRoom.id;
				
				var client:WorlizeServiceClient = new WorlizeServiceClient();
				client.addEventListener(WorlizeResultEvent.RESULT, function(event:WorlizeResultEvent):void {
					if (event.resultJSON.success) {
						backgroundsLocker.updateItems(event.resultJSON.data.updated_background_instances);
						backgroundImagesList.selectedIndex = -1;
					}
					else {
						Alert.show("Unable to set background: " + event.resultJSON.description);
					}
				});
				client.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void {
					Alert.show("Unable to set room background.");
				});
				client.send("/rooms/" + roomId + "/set_background.json", HTTPMethod.POST, {
					background_instance_guid: backgroundInstance.guid
				});
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('background', systemManager.getSandboxRoot());
			}
		]]>
	</fx:Script>
	
	
	<!--
	<components:controlBarContent>
		<components:UploadProgressIndicator
			uploader="{uploader}" />
		
		<mx:LinkButton
			id="uploadButton"
			click="uploadBackground()"
			enabled="{uploader.state == Uploader.STATE_READY}"
			styleName="lockerNavButton"
			color="#2b9610"
			icon="@Embed(source='src/assets/icons/icon_upload.png')"
			label="Upload" />
		
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.backgroundSlots}"
			line2="Used: {backgroundsLocker.count}"
			toolTip="Click to buy more locker space"/>
	</components:controlBarContent>
	-->

	<s:List id="backgroundImagesList" dataProvider="{backgroundsLocker.backgroundInstances}"
			top="0" right="0" left="0" bottom="0"
			borderVisible="false"
			change="handleBackgroundChange(event)"
			itemRenderer="com.worlize.view.itemrenderers.BackgroundLockerItemRenderer">
		<s:layout>
			<s:TileLayout paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10"
						  verticalGap="10" horizontalGap="10" />
		</s:layout>
	</s:List>
	
	
	
</s:Group>
