<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  xmlns:controls="controls.*"
						  gap="0"
						  creationComplete="handleCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.control.BackgroundUploader;
			import com.worlize.control.Marketplace;
			import com.worlize.control.Uploader;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.BackgroundImageAsset;
			import com.worlize.model.BackgroundImageInstance;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.locker.BackgroundsLocker;
			import com.worlize.model.locker.CopyrightNag;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			import com.worlize.view.itemrenderers.BackgroundLockerItemRenderer;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;
			
			import flex.utils.spark.resize.ResizeManager;
			
			private var logger:ILogger = Log.getLogger("com.worlize.view.author.MyBackgroundsWindow");
			
			[Bindable]
			private var uploader:BackgroundUploader = new BackgroundUploader();
			
			[Bindable]
			private var backgroundsLocker:BackgroundsLocker = new BackgroundsLocker();
			
			private var stateWatcher:ChangeWatcher;
			
			
			private function handleCreationComplete():void {
				stateWatcher = ChangeWatcher.watch(backgroundsLocker, ['state'], handleLockerStateChange);
				backgroundsLocker.load();
			}

			private function handleLockerStateChange(event:Event):void {
				switch (backgroundsLocker.state) {
					case BackgroundsLocker.STATE_ERROR:
						currentState = "loadError";
						break;
					case BackgroundsLocker.STATE_INIT:
						currentState = "init";
						break;
					case BackgroundsLocker.STATE_LOADING:
						currentState = "loading";
						break;
					case BackgroundsLocker.STATE_READY:
						currentState = "ready";
						break;
				}
			}
			
			private function handleUploadButtonClick(event:MouseEvent):void {
				if (CopyrightNag.dialogShown) {
					uploadBackground();
				}
				else {
					Alert.show(
						"Be advised: you may only upload images that you have created or that you have permission to use from the original artist! " +
						"Unauthorized usage of copyrighted material may lead to removal of that material and restrictions placed on your account.\n\n" +
						"Do you promise not to use unauthorized artwork?",
						"Copyright Reminder",
						Alert.YES | Alert.NO,
						null,
						handleCopyrightAgreementClick,
						null,
						Alert.NO);
				}
			}
			
			private function handleCopyrightAgreementClick(event:CloseEvent):void {
				if (event.detail === Alert.YES) {
					CopyrightNag.dialogShown = true;
					uploadBackground();
				}
			}

			private function uploadBackground():void {
				if (backgroundsLocker.emptySlots > 0) {
					uploader.browse();
				}
				else {
					Alert.show(
						"You don't have enough space!  You'll have to get rid of some existing backgrounds or buy some more space.  Would you like to buy some more space now?",
						"Curses! Foiled again!",
					    Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								BuyStorageSpaceWindow.open('background', systemManager.getSandboxRoot());
							}
						}
					); 
				}
			}
			
			private function handleBackgroundChange(event:IndexChangeEvent):void {
				var backgroundInstance:BackgroundImageInstance = backgroundImagesList.selectedItem;
				var client:InteractivityClient = InteractivityClient.getInstance();
				client.setBackgroundInstance(backgroundInstance.guid);
				
//				var client:WorlizeServiceClient = new WorlizeServiceClient();
//				client.addEventListener(WorlizeResultEvent.RESULT, function(event:WorlizeResultEvent):void {
//					if (event.resultJSON.success) {
//						backgroundsLocker.updateItems(event.resultJSON.data.updated_background_instances);
//						backgroundImagesList.selectedIndex = -1;
//					}
//					else {
//						Alert.show("Unable to set background: " + event.resultJSON.description);
//					}
//				});
//				client.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void {
//					Alert.show("Unable to set room background.");
//				});
//				client.send("/rooms/" + roomId + "/set_background.json", HTTPMethod.POST, {
//					background_instance_guid: backgroundInstance.guid
//				});
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('background', systemManager.getSandboxRoot());
			}
			
			private function launchMarketplace():void {
				ExternalInterface.call("openMarketplace", Marketplace.config['backgrounds_category_id']);
			}
		]]>
	</fx:Script>
	
	
	<s:states>
		<s:State name="init" />
		<s:State name="loading" />
		<s:State name="loadError" />
		<s:State name="ready" />
	</s:states>

	
	<!--
	<components:controlBarContent>
		<mx:LinkButton
			id="uploadButton"
			click="uploadBackground()"
			enabled="{uploader.state == Uploader.STATE_READY}"
			styleName="lockerNavButton"
			color="#2b9610"
			icon="@Embed(source='src/assets/icons/icon_upload.png')"
			label="Upload" />
		
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.backgroundSlots}"
			line2="Used: {backgroundsLocker.count}"
			toolTip="Click to buy more locker space"/>
	</components:controlBarContent>
	-->

	<s:Group width="100%" height="100%">
		<s:List id="backgroundImagesList" dataProvider="{backgroundsLocker.backgroundInstances}"
				includeIn="ready"
				top="0" right="0" left="0" bottom="0"
				borderVisible="false"
				change="handleBackgroundChange(event)"
				itemRenderer="com.worlize.view.itemrenderers.BackgroundLockerItemRenderer">
			<s:layout>
				<s:TileLayout paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10"
							  verticalGap="10" horizontalGap="10" />
			</s:layout>
		</s:List>
		
		<s:Group width="100%" height="100%" includeIn="loading">
			<controls:Spinner id="loadingSpinner"
							  autoPlay="true"
							  mouseEnabled="false"
							  mouseChildren="false"
							  size="44" numTicks="13"
							  tickWidth="3" speed="600"
							  horizontalCenter="0"
							  top="30"
							  fadeSpeed="500" tickColor="#222222" />
		</s:Group>
		
		<s:VGroup width="100%" height="100%" includeIn="loadError"
				  horizontalAlign="center" verticalAlign="middle">
			<s:Label fontSize="18" fontFamily="PTSansNarrow"
					 text="Unable to load backgrounds." />
			<s:Button label="Retry" click="backgroundsLocker.load()" />
		</s:VGroup>
	</s:Group>
	
	<s:Group width="100%" buttonMode="true" click="launchMarketplace()">
		<s:Rect top="0" left="0" right="0" height="1">
			<s:fill>
				<s:SolidColor color="#9fb883" />
			</s:fill>
		</s:Rect>
		<s:Rect top="1" left="0" right="0" bottom="0">
			<s:fill>
				<s:SolidColor color="#c7deac" />
			</s:fill>
		</s:Rect>
		<s:Label color="#376600" fontSize="20"
				 fontFamily="PTSansNarrowBold"
				 verticalCenter="0" horizontalCenter="0"
				 paddingTop="8" paddingBottom="5"
				 text="Click Here to Get Backgrounds in the Marketplace!" />
	</s:Group>
	
	<s:Group width="100%">
		<s:Rect bottom="0" right="0" top="0" left="0">
			<s:fill>
				<s:SolidColor color="#EEEEEE" />
			</s:fill>
		</s:Rect>
		<s:Rect top="0" width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#BBBBBB" />
			</s:fill>
		</s:Rect>
		<s:HGroup horizontalAlign="right" verticalAlign="middle"
				  width="100%"
				  paddingTop="6" paddingRight="15" paddingBottom="5">
			<components:UploadProgressIndicator
				uploader="{uploader}" />

			<mx:LinkButton
				id="uploadButton"
				click="handleUploadButtonClick(event)"
				enabled="{uploader.state === Uploader.STATE_READY &amp;&amp; backgroundsLocker.state === BackgroundsLocker.STATE_READY}"
				styleName="lockerNavButton"
				color="#2b9610"
				icon="@Embed(source='src/assets/icons/icon_upload.png')"
				toolTip="Click to upload a new Background."
				label="Upload" />
		</s:HGroup>
	</s:Group>

</s:VGroup>
