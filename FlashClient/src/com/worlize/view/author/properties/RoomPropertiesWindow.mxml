<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
								 xmlns:s="library://ns.adobe.com/flex/spark" 
								 xmlns:mx="library://ns.adobe.com/flex/mx"
								 xmlns:components="com.worlize.view.components.*"
								 title="Area Settings"
								 titleBarColor="#c9c9c9"
								 titleTextColor="#7d8487"
								 windowIcon="@Embed('assets/icons/large/w_icon_room_settings.png')"
								 resizable="false"
								 creationComplete="handleCreationComplete()"
								 width="340" height="165">
	<components:layout>
		<s:VerticalLayout
			paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" />
	</components:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.PreferencesManager;
			import com.worlize.notification.RoomChangeNotification;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.events.TitleWindowBoundsEvent;

			private static var _instance:RoomPropertiesWindow;
			private static var _open:Boolean = false;
			
			[Bindable]
			private var client:InteractivityClient = InteractivityClient.getInstance();
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}

			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						needsPosition = true;
						_instance = new RoomPropertiesWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
						_instance.addEventListener(TitleWindowBoundsEvent.WINDOW_MOVE_END, function(event:TitleWindowBoundsEvent):void {
							preferences.setPreference('roomPreferencesPosition', [_instance.x, _instance.y]);
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					if (needsPosition) {
						var coordinates:Array = preferences.getPreference('roomPreferencesPosition') as Array;
						if (coordinates &&
							_instance.boundsAreValid(coordinates[0], coordinates[1], _instance.width, _instance.height))
						{
							_instance.x = coordinates[0];
							_instance.y = coordinates[1];
						}
						else {
							PopUpManager.centerPopUp(_instance);
						}
					}
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance) {
					PopUpManager.removePopUp(_instance);
					_open = false;
					_instance = null;
				}
			}
			
			private function handleCreationComplete():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
			}
			
			private function handleAuthorModeDisabled(event:AuthorModeNotification):void {
				close();
			}
			
			private function save():void {
				var serviceClient:WorlizeServiceClient = new WorlizeServiceClient();
				serviceClient.addEventListener(WorlizeResultEvent.RESULT, function(event:WorlizeResultEvent):void {
					if (!event.resultJSON.success) {
						Alert.show("Unable to save room: " + event.resultJSON.description);
					}
					else {
						close();
					}
				});
				serviceClient.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void {
					Alert.show("Unable to save room: Communicaton Error", "Error");
				});
				serviceClient.send("/rooms/" + client.currentRoom.id + ".json", HTTPMethod.PUT, {
					"room[name]": nameField.text
				});
			}
			
			private function saveSnowEnabled():void {
				client.updateRoomProperty('snowEnabled', fallingSnowCheckbox.selected);
			}
			
			private function deleteRoom():void {
				Alert.show("Are you sure you wish to delete this area?", "Delete Area",
							Alert.YES | Alert.NO,
							null,
							handleDeleteConfirmationClose,
							null,
							Alert.NO);
			}
			
			private function handleDeleteConfirmationClose(event:CloseEvent):void {
				if (event.detail === Alert.YES) {
					actuallyDeleteRoom();
				}				
			}
			
			private function actuallyDeleteRoom():void {
				var serviceClient:WorlizeServiceClient = new WorlizeServiceClient();
				serviceClient.addEventListener(WorlizeResultEvent.RESULT, function(event:WorlizeResultEvent):void {
					if (event.resultJSON.success) {
						// Notification that the room is deleted will come through
						// the Websocket connection.
						close();
					}
					else { 
						Alert.show("Unable to delete area: " + event.resultJSON.description, "Error");
					}
				});
				serviceClient.addEventListener(FaultEvent.FAULT, function(event:FaultEvent):void {
					Alert.show("Unable to delete area: Communication Error", "Error");
				});
				serviceClient.send('/rooms/' + client.currentRoom.id + '.json', HTTPMethod.DELETE);
			}
			
		]]>
	</fx:Script>
	
	<s:TextInput width="100%"
				 styleName="big"
				 id="nameField"
				 text="{client.currentRoom.name}"
			 />
	<s:CheckBox label="Falling Snow" id="fallingSnowCheckbox" selected="{client.currentRoom.snowEnabled}" change="saveSnowEnabled()" />
	
	<mx:Spacer height="100%" />
	
	<s:HGroup width="100%">
		<s:Button label="Delete Area" click="deleteRoom()" />
		<mx:Spacer width="100%" />
		<s:Button label="Cancel" click="close()" />
		<s:Button label="Save" click="save()" />
	</s:HGroup>
	
</components:WorlizeWindow>
