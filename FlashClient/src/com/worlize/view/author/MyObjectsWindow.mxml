<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  title="My Objects"
						  titleBarColor="#c04848" titleTextColor="#c04848" 
						  windowIcon="@Embed('assets/icons/large/w_icon_objects.png')"
						  minWidth="525" minHeight="415"
						  creationComplete="handleCreationComplete()"
						  width="525" height="415">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.components.visualnotification.VisualNotification;
			import com.worlize.control.InWorldObjectUploader;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.locker.InWorldObjectLocker;
			import com.worlize.view.itemrenderers.InWorldObjectLockerItemRenderer;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;
			private static var _open:Boolean = false;
			private static var _instance:WorlizeWindow;
			
			[Bindable]
			private var inWorldObjectLocker:InWorldObjectLocker = new InWorldObjectLocker();
			
			[Bindable]
			private var uploader:InWorldObjectUploader = new InWorldObjectUploader();
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}
			
			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						needsPosition = true;
						_instance = new MyObjectsWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
						_instance.addEventListener(ResizeManager.RESIZE_END, function(event:ResizeEvent):void {
							preferences.setPreference('myObjectsSize', [_instance.width, _instance.height]);
						});
						_instance.addEventListener(TitleWindowBoundsEvent.WINDOW_MOVE_END, function(event:TitleWindowBoundsEvent):void {
							preferences.setPreference('myObjectsPosition', [_instance.x, _instance.y]);
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					if (needsPosition) {
						var coordinates:Array = preferences.getPreference('myObjectsPosition') as Array;
						var size:Array = preferences.getPreference('myObjectsSize') as Array;
						if (coordinates && size &&
							_instance.boundsAreValid(coordinates[0], coordinates[1], size[0], size[1]))
						{
							_instance.x = coordinates[0];
							_instance.y = coordinates[1];
							_instance.width = size[0];
							_instance.height = size[1];
						}
						else {
							PopUpManager.centerPopUp(_instance);
						}
					}
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance) {
					PopUpManager.removePopUp(_instance);
					_open = false;
				}
			}
			
			private function handleCreationComplete():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				loadData();
			}
			
			private function handleAuthorModeDisabled(notification:AuthorModeNotification):void {
				close();
			}
			
			private function loadData():void {
				inWorldObjectLocker.load();
			}
			
			private function uploadObject():void {
				if (inWorldObjectLocker.emptySlots > 0) {
					uploader.browse();
				}
				else {
					Alert.show(
						"You've run out of space.  You'll have to delete some existing objects to make room, or purchase some more space.  Would you like to purchase more space now?",
						"Oh no!",
						Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								BuyStorageSpaceWindow.open('in_world_object', systemManager.getSandboxRoot());
							}
						}
					); 
				}
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('in_world_object', systemManager.getSandboxRoot());
			}
		]]>
	</fx:Script>
	
	<components:controlBarContent>
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.inWorldObjectSlots}"
			line2="Used: {inWorldObjectLocker.count}"
			toolTip="Click to buy more locker space"/>
	</components:controlBarContent>
	
	<s:HGroup right="10" top="5" gap="10" verticalAlign="middle">
		<components:UploadProgressIndicator
			uploader="{uploader}" />
		
		<mx:LinkButton
			id="uploadButton"
			click="uploadObject()"
			enabled="{uploader.state == Uploader.STATE_READY}"
			styleName="lockerNavButton"
			color="#2b9610"
			icon="@Embed(source='src/assets/icons/icon_upload.png')"
			label="Upload" />
	</s:HGroup>
	
	
	<s:List top="40" right="10" left="10" bottom="10"
			id="inWorldObjectsList" dataProvider="{inWorldObjectLocker.instances}"
			borderVisible="false"
			itemRenderer="com.worlize.view.itemrenderers.InWorldObjectLockerItemRenderer">
		<s:layout>
			<s:TileLayout verticalGap="10" horizontalGap="10" />
		</s:layout>
	</s:List>	
	
</components:WorlizeWindow>
