<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  currentState="init"
						  creationComplete="handleCreationComplete()" xmlns:controls="controls.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.control.InWorldObjectUploader;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.locker.InWorldObjectLocker;
			import com.worlize.view.itemrenderers.InWorldObjectLockerItemRenderer;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;

			[Bindable]
			private var inWorldObjectLocker:InWorldObjectLocker = new InWorldObjectLocker();
			
			[Bindable]
			private var uploader:InWorldObjectUploader = new InWorldObjectUploader();
			
			private var stateWatcher:ChangeWatcher;
			
			private function handleCreationComplete():void {
				stateWatcher = ChangeWatcher.watch(inWorldObjectLocker, ['state'], handleLockerStateChange);
				inWorldObjectLocker.load();
			}
			
			private function handleLockerStateChange(event:Event):void {
				switch (inWorldObjectLocker.state) {
					case InWorldObjectLocker.STATE_ERROR:
						currentState = "loadError";
						break;
					case InWorldObjectLocker.STATE_INIT:
						currentState = "init";
						break;
					case InWorldObjectLocker.STATE_LOADING:
						currentState = "loading";
						break;
					case InWorldObjectLocker.STATE_READY:
						currentState = "ready";
						break;
				}
			}
			
			private function uploadObject():void {
				if (inWorldObjectLocker.emptySlots > 0) {
					uploader.browse();
				}
				else {
					Alert.show(
						"You've run out of space.  You'll have to delete some existing objects to make room, or purchase some more space.  Would you like to purchase more space now?",
						"Oh no!",
						Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								BuyStorageSpaceWindow.open('in_world_object', systemManager.getSandboxRoot());
							}
						}
					); 
				}
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('in_world_object', systemManager.getSandboxRoot());
			}
		]]>
	</fx:Script>
	
	<!--
	<components:controlBarContent>
		<components:UploadProgressIndicator
			uploader="{uploader}" />
		
		<mx:LinkButton
			id="uploadButton"
			click="uploadObject()"
			enabled="{uploader.state == Uploader.STATE_READY}"
			styleName="lockerNavButton"
			color="#2b9610"
			icon="@Embed(source='src/assets/icons/icon_upload.png')"
			label="Upload" />
		
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.inWorldObjectSlots}"
			line2="Used: {inWorldObjectLocker.count}"
			toolTip="Click to buy more locker space"/>
	</components:controlBarContent>
	-->
	
	<s:states>
		<s:State name="init" />
		<s:State name="loading" />
		<s:State name="loadError" />
		<s:State name="ready" />
	</s:states>
	
	<s:List top="0" right="0" left="0" bottom="0"
			includeIn="ready"
			id="inWorldObjectsList" dataProvider="{inWorldObjectLocker.instances}"
			borderVisible="false"
			itemRenderer="com.worlize.view.itemrenderers.InWorldObjectLockerItemRenderer">
		<s:layout>
			<s:TileLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
						  verticalGap="10" horizontalGap="10" />
		</s:layout>
	</s:List>	
	
	<s:Group width="100%" height="100%" includeIn="loading">
		<controls:Spinner id="loadingSpinner"
						  autoPlay="true"
						  mouseEnabled="false"
						  mouseChildren="false"
						  size="44" numTicks="13"
						  tickWidth="3" speed="600"
						  horizontalCenter="0"
						  top="30"
						  fadeSpeed="500" tickColor="#222222" />
	</s:Group>
	
	<s:VGroup width="100%" height="100%" includeIn="loadError"
			  horizontalAlign="center" verticalAlign="middle">
		<s:Label fontSize="18" fontFamily="PTSansNarrow"
				 text="Unable to load objects." />
		<s:Button label="Retry" click="inWorldObjectLocker.load()" />
	</s:VGroup>
	
</s:Group>
