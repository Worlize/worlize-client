<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  title="My Locker"
						  titleBarColor="#c04848" titleTextColor="#c04848" 
						  windowIcon="@Embed('assets/icons/large/w_icon_objects.png')"
						  minWidth="525" minHeight="415"
						  width="525" height="415" xmlns:author="com.worlize.view.author.*">
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.model.PreferencesManager;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.events.CloseEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.TitleWindowBoundsEvent;
			private static var _open:Boolean = false;
			private static var _instance:WorlizeWindow;
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}
			
			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						needsPosition = true;
						_instance = new AuthorLockerWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
						_instance.addEventListener(ResizeManager.RESIZE_END, function(event:ResizeEvent):void {
							preferences.setPreference('authorLockerSize', [_instance.width, _instance.height]);
						});
						_instance.addEventListener(TitleWindowBoundsEvent.WINDOW_MOVE_END, function(event:TitleWindowBoundsEvent):void {
							preferences.setPreference('authorLockerPosition', [_instance.x, _instance.y]);
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					if (needsPosition) {
						var coordinates:Array = preferences.getPreference('authorLockerPosition') as Array;
						var size:Array = preferences.getPreference('authorLockerSize') as Array;
						if (coordinates && size &&
							_instance.boundsAreValid(coordinates[0], coordinates[1], size[0], size[1]))
						{
							_instance.x = coordinates[0];
							_instance.y = coordinates[1];
							_instance.width = size[0];
							_instance.height = size[1];
						}
						else {
							PopUpManager.centerPopUp(_instance);
						}
					}
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance) {
					PopUpManager.removePopUp(_instance);
					_open = false;
				}
			}
			
			private function handleCreationComplete():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
			}
			
			private function handleAuthorModeDisabled(notification:AuthorModeNotification):void {
				close();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup gap="0" paddingTop="10" width="100%" height="100%">
		<s:Group width="100%">
			<s:TabBar left="10" id="tabBar"
					  dataProvider="{lockerViewStack}" />
			<s:Rect width="100%" height="1" bottom="0">
				<s:fill>
					<s:SolidColor color="#777777" />
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<mx:ViewStack id="lockerViewStack" width="100%" height="100%">
			<s:NavigatorContent id="backgroundsTab" label="Backgrounds">
				<author:MyBackgroundsLockerView width="100%" height="100%" />
			</s:NavigatorContent>
			
			<s:NavigatorContent id="objectsTab" label="Objects">
				<author:MyObjectsLockerView width="100%" height="100%" />
			</s:NavigatorContent>
			
			<s:NavigatorContent id="appsTab" label="Apps">
				
			</s:NavigatorContent>
		</mx:ViewStack>
		
		<s:Group width="100%">
			<s:Rect bottom="0" right="10" top="0" left="0">
				<s:fill>
					<s:SolidColor color="#EEEEEE" />
				</s:fill>
			</s:Rect>
			<s:Rect top="0" width="100%" height="1">
				<s:fill>
					<s:SolidColor color="#BBBBBB" />
				</s:fill>
			</s:Rect>
			<s:HGroup horizontalAlign="right" verticalAlign="baseline"
					  width="100%"
					  paddingTop="6" paddingRight="5" paddingBottom="5">
				<s:Button label="Upload" />
			</s:HGroup>
		</s:Group>
	</s:VGroup>
	
	
	
</components:WorlizeWindow>
