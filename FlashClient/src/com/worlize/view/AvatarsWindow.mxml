<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  title="My Avatars"
						  titleBarColor="#f5b501" titleTextColor="#d59d00" 
						  windowIcon="@Embed('assets/icons/large/w_icon_myavatars.png')"
						  minWidth="393" minHeight="200"
						  creationComplete="handleCreationComplete()"
						  currentState="{avatarLocker.count > 0 ? 'normal' : 'empty'}"
						  width="393" height="430" xmlns:locker="com.worlize.view.locker.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.components.visualnotification.VisualNotification;
			import com.worlize.control.AvatarUploader;
			import com.worlize.control.Uploader;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.model.InteractivityUser;
			import com.worlize.interactivity.model.UserRestriction;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.AvatarInstance;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.SimpleAvatar;
			import com.worlize.model.locker.AvatarLocker;
			import com.worlize.model.locker.PropLocker;
			import com.worlize.model.locker.Slots;
			import com.worlize.notification.AvatarNotification;
			import com.worlize.rpc.HTTPMethod;
			import com.worlize.rpc.WorlizeResultEvent;
			import com.worlize.rpc.WorlizeServiceClient;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.MenuEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.events.StateChangeEvent;
			import mx.graphics.SolidColor;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;
			private static var _open:Boolean = false;
			private static var _instance:WorlizeWindow;
			
			[Bindable]
			private var client:InteractivityClient = InteractivityClient.getInstance();
			
			[Bindable]
			private var avatarLocker:AvatarLocker = AvatarLocker.getInstance();
			
			[Bindable]
			private var propsLocker:PropLocker = PropLocker.getInstance();
			
			[Bindable]
			private var avatarUploader:AvatarUploader = new AvatarUploader();
			
			[Bindable]
			private var savingAvatar:Boolean = false;
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}
			
			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						needsPosition = true;
						_instance = new AvatarsWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					if (needsPosition) {
						var coordinates:Array = preferences.getPreference('lockerPosition') as Array;
						var size:Array = preferences.getPreference('lockerSize') as Array;
						if (coordinates && size &&
							_instance.boundsAreValid(coordinates[0], coordinates[1], size[0], size[1]))
						{
							_instance.x = coordinates[0];
							_instance.y = coordinates[1];
							_instance.width = size[0];
							_instance.height = size[1];
						}
						else {
							PopUpManager.centerPopUp(_instance);
						}
					}
					_open = true;
				}
			}
			
			private function saveSizeAndPosition():void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				preferences.setPreference('lockerPosition', [x,y]);
				preferences.setPreference('lockerSize', [width, height]);
			}
			
			public static function close():void {
				if (_open && _instance) {
					PopUpManager.removePopUp(_instance);
					_open = false;
				}
			}
			
			private function handleCreationComplete():void {
				addEventListener(ResizeManager.RESIZE_END, function(event:ResizeEvent):void {
					saveSizeAndPosition();
				});
				addEventListener(TitleWindowBoundsEvent.WINDOW_MOVE_END, function(event:TitleWindowBoundsEvent):void {
					saveSizeAndPosition();
				});
				
				// Load initial data
//				avatarLocker.load();
				
				avatarUploader.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, handleUploadStateChange);
			}
			
			private function uploadAvatar():void {
				if (avatarLocker.emptySlots > 0) {
					avatarUploader.browse();
				}
				else {
					Alert.show(
						"You don't have enough space!  You'll have to delete some old crusty avatars to make room, or buy some more space.  Would you like to buy more space now?",
						"Aww, man!",
						Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								showBuySlotsWindow();
							}
						}
					); 
				}
			}
			
			private function handleUploadStateChange(event:StateChangeEvent):void {
				if (event.newState == Uploader.STATE_READY) {
					uploadButton.enabled = true;
				}
				else {
					uploadButton.enabled = false;
				}
			}
			
			private function handleAvatarSelectionChanged(event:IndexChangeEvent):void {
				var selectedAvatarInstance:AvatarInstance = avatarLocker.avatarInstances.getItemAt(event.newIndex) as AvatarInstance;
				if (selectedAvatarInstance && selectedAvatarInstance.avatar) {
					InteractivityClient.getInstance().setSimpleAvatar(selectedAvatarInstance.avatar.guid);
				}
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('avatar', systemManager.getSandboxRoot());
			}
			
			private function saveCurrentAvatar():void {
				var currentUser:InteractivityUser = client.currentUser;
				if (currentUser === null || currentUser.simpleAvatar === null) {
					Alert.show(
						"You must be wearing an avatar to save.",
						"Information"
					);
					return;
				}
				var currentAvatarGuid:String = currentUser.simpleAvatar.guid;
				
				for each (var avatarInstance:AvatarInstance in avatarLocker.avatarInstances) {
					if (avatarInstance.avatar.guid === currentAvatarGuid) {
						Alert.show(
							"You already have this avatar in your locker.",
							"Information"
						);
						return;
					}
				}
				
				savingAvatar = true;
				var serviceClient:WorlizeServiceClient = new WorlizeServiceClient();
				serviceClient.addEventListener(WorlizeResultEvent.RESULT, handleSaveCurrentAvatarResult);
				serviceClient.addEventListener(FaultEvent.FAULT, handleSaveCurrentAvatarFault);
				serviceClient.send("/locker/avatars/" + currentAvatarGuid + "/save_instance", HTTPMethod.POST);
			}

			private function handleSaveCurrentAvatarResult(event:WorlizeResultEvent):void {
				savingAvatar = false;
				if (!event.resultJSON.success) {
					Alert.show(
						event.resultJSON.description,
						"Error"
					);
				}
			}
			
			private function handleSaveCurrentAvatarFault(event:FaultEvent):void {
				savingAvatar = false;
				Alert.show("An unknown error occurred while trying to save your current avatar.", "Error");
			}
		]]>
	</fx:Script>
	
	<components:states>
		<s:State name="normal" />
		<s:State name="empty" />
	</components:states>
	
	<components:controlBarContent>
		<!--
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.avatarSlots}"
			line2="Used: {avatarLocker.count}"
			toolTip="Click to buy more locker space"/>
		-->
		<!--
		<mx:Spacer width="20" />
		<mx:LinkButton
			styleName="topNavButton"
			color="#B58B0B"
			icon="@Embed(source='src/assets/icons/icon_marketplace.png')"
			click="MarketplaceWindow.toggleOpen(systemManager.getSandboxRoot())"
			label="Marketplace" />
		-->
	</components:controlBarContent>
	
	<components:layout>
		<s:VerticalLayout paddingTop="10" gap="0" />
	</components:layout>

	<s:Rect width="100%" height="1" includeIn="normal">
		<s:fill>
			<s:SolidColor color="#DDDDDD" />
		</s:fill>
	</s:Rect>
	
	<s:Group width="100%" 
			  visible="{client.currentUser &amp;&amp; (client.currentUser.hasActiveRestriction(UserRestriction.BLOCK_AVATARS) || client.currentUser.hasActiveRestriction(UserRestriction.PIN))}"
			  includeInLayout="{client.currentUser &amp;&amp; (client.currentUser.hasActiveRestriction(UserRestriction.BLOCK_AVATARS) || client.currentUser.hasActiveRestriction(UserRestriction.PIN))}">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#FFBBBB" />
			</s:fill>
		</s:Rect>
		<s:Label text="A moderator has revoked your ability to wear avatars."
				 paddingBottom="6" paddingTop="6"
				 fontFamily="PTSansNarrowBold"
				 fontSize="16"
				 horizontalCenter="0"
				 color="#990000" />
	</s:Group>
	

	<s:List width="100%" height="100%"
			includeIn="normal"
			id="avatarsList" dataProvider="{avatarLocker.avatarInstances}"
			borderVisible="false" change="handleAvatarSelectionChanged(event)"
			itemRenderer="com.worlize.view.itemrenderers.LockerItemRenderer">
		<s:layout>
			<s:TileLayout paddingTop="10" paddingLeft="10"
						  paddingRight="10" paddingBottom="10"
						  verticalGap="10" horizontalGap="10" />
		</s:layout>
	</s:List>
	
	<s:Group width="100%" height="100%" includeIn="empty">
		<s:Label color="#666666" fontFamily="PTSansNarrowBold"
				 fontSize="24" verticalCenter="0"
				 width="100%" textAlign="center"
				 paddingRight="50" paddingLeft="50"
				 text="You don't have any Avatars.  Click 'Upload' below to create your first Avatar!" />
	</s:Group>

	<s:Group width="100%">
		<s:Rect bottom="0" right="0" top="0" left="0">
			<s:fill>
				<s:SolidColor color="#EEEEEE" />
			</s:fill>
		</s:Rect>
		<s:Rect top="0" width="100%" height="1">
			<s:fill>
				<s:SolidColor color="#BBBBBB" />
			</s:fill>
		</s:Rect>
		<s:HGroup horizontalAlign="right" verticalAlign="middle"
				  width="100%"
				  paddingTop="6" paddingRight="15" paddingBottom="5">
			<components:UploadProgressIndicator
				uploader="{avatarUploader}" />
			
			<mx:LinkButton
				id="saveButton"
				click="saveCurrentAvatar()"
				styleName="lockerNavButton"
				color="#2b9610"
				icon="@Embed(source='src/assets/icons/icon_add.png')"
				toolTip="Click to save the Avatar you're currently wearing."
				enabled="{!savingAvatar}"
				label="Save" />
			
			<mx:LinkButton
				id="uploadButton"
				click="uploadAvatar()"
				enabled="{avatarUploader.state === Uploader.STATE_READY &amp;&amp; avatarLocker.state === AvatarLocker.STATE_READY}"
				styleName="lockerNavButton"
				color="#2b9610"
				icon="@Embed(source='src/assets/icons/icon_upload.png')"
				toolTip="Click to upload a new Avatar"
				label="Upload" />
		</s:HGroup>
	</s:Group>

</components:WorlizeWindow>
