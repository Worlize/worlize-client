<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:components="com.worlize.view.components.*"
				autoDrawBackground="false"
				currentState="normal"
				
				width="100%" height.normal="82">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.model.App;
			import com.worlize.model.AppInstance;
			import com.worlize.model.locker.AppLockerEntry;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import spark.filters.DropShadowFilter;
			
			/**
			 *  @private
			 *  Storage for the data property.
			 */
			[Bindable]
			private var _data:AppLockerEntry;
			
			[Bindable("dataChange")]
			override public function get data():Object
			{
				return _data;
			}
			
			/**
			 *  @private
			 */
			override public function set data(value:Object):void
			{
				if (_data === value) { return; }
				if (value is AppLockerEntry) {
					_data = AppLockerEntry(value);
					invalidateRendererState();
					dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				}
			}
			
			override protected function getCurrentRendererState():String {
				if (_data) {
					return _data.viewExpanded ? "expanded" : "normal";
				}
				return "normal";
			}
			
			private function handleDeleteClick(event:MouseEvent):void {
				event.stopImmediatePropagation();
				var alert:Alert = Alert.show(
					"Are you sure you want to delete this app?",
					"Delete App",
					Alert.YES | Alert.NO,
					null,
					handleAlertClose,
					null,
					Alert.NO);
			}
			
			private function handleAlertClose(event:CloseEvent):void {
				if (event.detail === Alert.YES) {
					requestDelete();
				}
			}
			
			private function requestDelete():void {
				for each (var instance:AppInstance in AppLockerEntry(data).instances) {
					instance.requestDelete();
				}
			}
			
			private function handleMouseDown(event:MouseEvent):void {
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
			}
			
			private function handleMouseMove(event:MouseEvent):void {
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				
				if (event.buttonDown) {
					var instance:AppInstance = AppLockerEntry(data).unusedInstance;
					var dragSource:DragSource = new DragSource();
					if (instance) {
						dragSource.addData({
							startMouseX: event.stageX,
							startMouseY: event.stageY,
							guid: instance.guid
						}, 'appFromLocker');
					}
					else {
						dragSource.addData({
							startMouseX: event.stageX,
							startMouseY: event.stageY,
							appGuid: AppLockerEntry(data).app.guid
						}, 'appFromLockerRequiresDuplicate');
					}
						
					var proxy:spark.components.Image = new spark.components.Image();
					proxy.source = AppLockerEntry(data).app.mediumIconURL;
					proxy.width = 80;
					proxy.height = 80;
					proxy.filters = [
						new DropShadowFilter(3, 45, 0, 0.7, 10, 10, 1, 2)
					];
					
					DragManager.doDrag(iconImage, dragSource, event, proxy, 0, 0, 0.7);
				}
			}
			
			protected function handleImageRollOver(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.HAND;
			}
			
			protected function handleImageRollOut(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.ARROW;
			}
			
			protected function toggleDetails():void {
				if (_data) {
					_data.viewExpanded = !_data.viewExpanded;
					invalidateRendererState();
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="expanded" />
	</s:states>
	
	<s:Image left="1" top="1" width="80" height="80"
			 id="iconImage"
			 toolTip="Drag this icon into your room to install a copy of the app."
			 source="{_data.app.mediumIconURL}"
			 rollOver="handleImageRollOver(event)"
			 rollOut="handleImageRollOut(event)"
			 mouseDown="handleMouseDown(event)" />
	
	<s:VGroup gap="0" top="11" width="100%">
		<s:VGroup paddingLeft="90" paddingRight="133" width="100%" gap="3">
			<s:Label width="100%"
					 fontFamily="PTSansNarrowBold" fontSize="18"
					 maxDisplayedLines.normal="1"
					 text="Shoutcast Player"/>
			<s:Label width="100%" verticalAlign="top"
					 maxDisplayedLines.normal="3"
					 minHeight="50"
					 text="Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat."/>
		</s:VGroup>
		
		<s:VGroup includeIn="expanded" width="100%" horizontalAlign="center"
				  paddingTop="20" paddingBottom="30">
			<s:Panel title="Copies of {_data.app.name}" width="420">
				<s:List includeIn="expanded" width="100%" borderVisible="false">
					<s:layout>
						<s:VerticalLayout gap="0" requestedMinRowCount="1" requestedMaxRowCount="6" />
					</s:layout>
					<s:dataProvider>
						<s:ArrayList>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
							<fx:String>Foo Bar</fx:String>
							<fx:String>Baz Bing</fx:String>
						</s:ArrayList>
					</s:dataProvider>
				</s:List>			
			</s:Panel>
		</s:VGroup>
	</s:VGroup>
	
	<s:VGroup right="10" top="11" width="102"
			  id="optionsContainer"
			  verticalAlign="top" horizontalAlign="center">
		<s:Label width="100%" color="#8C8C8C" fontFamily="Arial"
				 text="{_data.instances.length} {_data.instances.length === 1 ? 'copy' : 'copies'}, {_data.instancesUsed} used"
				 fontStyle="italic" fontWeight="normal"
				 textAlign="center" verticalAlign="top"/>
		<mx:PopUpMenuButton width="100%" label="Options" fontFamily="Arial"/>
		<mx:LinkButton click="toggleDetails()"
					   width="100%"
					   label.normal="Show Details..."
					   label.expanded="Hide Details..."
					   color="#8C8C8C"/>
	</s:VGroup>
	
	
</s:ItemRenderer>
