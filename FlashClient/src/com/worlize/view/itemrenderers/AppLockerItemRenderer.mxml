<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:components="com.worlize.view.components.*"
				autoDrawBackground="false"
				currentState="normal"
				initialize="handleInitialize(event)"
				width="100%" height.normal="82">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.model.App;
			import com.worlize.model.AppInstance;
			import com.worlize.model.locker.AppLockerEntry;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.DragSource;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.managers.DragManager;
			import mx.utils.StringUtil;
			
			import spark.filters.DropShadowFilter;

			[Bindable]
			private var menu:Menu;
			
			/**
			 *  @private
			 *  Storage for the data property.
			 */
			[Bindable]
			private var _data:AppLockerEntry;
			
			[Bindable("dataChange")]
			override public function get data():Object
			{
				return _data;
			}
			
			/**
			 *  @private
			 */
			override public function set data(value:Object):void
			{
				if (_data === value) { return; }
				if (value is AppLockerEntry) {
					_data = AppLockerEntry(value);
					invalidateRendererState();
					dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
				}
			}
			
			override protected function getCurrentRendererState():String {
				if (_data) {
					return _data.viewExpanded ? "expanded" : "normal";
				}
				return "normal";
			}
			
			protected function handleInitialize(event:FlexEvent):void {
				updateMenu();
			}
			
			private function updateMenu():void {
				if (menu) {
					menu.removeEventListener(MenuEvent.ITEM_CLICK, handleMenuItemClick);
				}
				
				var menuData:Array = [];
				
				menuData.push({ type: 'normal', label: 'Get Another Copy', action: 'getAnotherCopy' });
				menuData.push({ type: 'normal', label: 'Read App Instructions...', action: 'readInstructions' });
				menuData.push({ type: 'normal', label: 'Delete All Copies', action: 'deleteAll' });
				
				menu = Menu.createMenu(null, menuData, true);
				menu.addEventListener(MenuEvent.ITEM_CLICK, handleMenuItemClick);
			}
			
			private function handleMenuItemClick(event:MenuEvent):void {
				trace("Menu item clicked: " + event.item.action);
				switch (event.item.action) {
					case 'deleteAll':
						deleteAllCopies();
						break;
					case 'readInstructions':
						break;
					case 'getAnotherCopy':
						_data.app.requestAnotherCopy();
						break;
					default:
						break;
				}
			}
			
			private function deleteAllCopies():void {
				Alert.show(
					"Are you sure you want to delete all copies of this app? " +
					"Any copies in use will be immediately removed from their respective rooms.",
					"Confirm",
					Alert.YES | Alert.NO, null,
					function(event:CloseEvent):void {
						if (event.detail === Alert.YES && _data.app) {
							_data.app.requestDelete();
						}
					}
				);
			}
			
			private function handleDeleteClick(event:MouseEvent):void {
				event.stopImmediatePropagation();
				var alert:Alert = Alert.show(
					"Are you sure you want to delete this app?",
					"Delete App",
					Alert.YES | Alert.NO,
					null,
					handleAlertClose,
					null,
					Alert.NO);
			}
			
			private function handleAlertClose(event:CloseEvent):void {
				if (event.detail === Alert.YES) {
					requestDelete();
				}
			}
			
			private function requestDelete():void {
				for each (var instance:AppInstance in AppLockerEntry(data).instances) {
					instance.requestDelete();
				}
			}
			
			private function handleMouseDown(event:MouseEvent):void {
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
			}
			
			private function handleMouseMove(event:MouseEvent):void {
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleMouseMove);
				
				if (event.buttonDown) {
					var instance:AppInstance = AppLockerEntry(data).unusedInstance;
					var dragSource:DragSource = new DragSource();
					if (instance) {
						dragSource.addData({
							startMouseX: event.stageX,
							startMouseY: event.stageY,
							guid: instance.guid
						}, 'appFromLocker');
					}
					else {
						dragSource.addData({
							startMouseX: event.stageX,
							startMouseY: event.stageY,
							appGuid: AppLockerEntry(data).app.guid
						}, 'appFromLockerRequiresDuplicate');
					}
						
					var proxy:spark.components.Image = new spark.components.Image();
					proxy.source = AppLockerEntry(data).app.mediumIconURL;
					proxy.width = 80;
					proxy.height = 80;
					proxy.filters = [
						new DropShadowFilter(3, 45, 0, 0.7, 10, 10, 1, 2)
					];
					
					DragManager.doDrag(iconImage, dragSource, event, proxy, 0, 0, 0.7);
				}
			}
			
			protected function handleImageRollOver(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.HAND;
			}
			
			protected function handleImageRollOut(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.ARROW;
			}
			
			protected function toggleDetails():void {
				if (_data) {
					_data.viewExpanded = !_data.viewExpanded;
					invalidateRendererState();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="expanded" />
	</s:states>
	
	<s:Image left="1" top="1" width="80" height="80"
			 id="iconImage"
			 toolTip="Drag this icon into your room to install a copy of the app."
			 source="{_data.app.mediumIconURL}"
			 rollOver="handleImageRollOver(event)"
			 rollOut="handleImageRollOut(event)"
			 mouseDown="handleMouseDown(event)" />
	
	<s:VGroup gap="0" top="11" width="100%">
		<s:VGroup paddingLeft="90" paddingRight="133" width="100%" gap="3">
			<s:Label width="100%"
					 fontFamily="PTSansNarrowBold" fontSize="18"
					 maxDisplayedLines.normal="1"
					 text="{_data.app.name}"/>
			<s:Label width="100%" verticalAlign="top"
					 maxDisplayedLines.normal="3"
					 minHeight="50"
					 text="{_data.app.description}"/>
		</s:VGroup>
		
		<s:VGroup includeIn="expanded" width="100%" horizontalAlign="center"
				  paddingTop="20" paddingBottom="30">
			<s:Panel title="Copies of {_data.app.name}" width="420">
				<s:List includeIn="expanded" width="100%" borderVisible="false" dataProvider="{_data.instances}"
						itemRenderer="com.worlize.view.itemrenderers.AppInstanceItemRenderer">
					<s:layout>
						<s:VerticalLayout gap="3" requestedMinRowCount="1" requestedMaxRowCount="6"
										  paddingTop="3" paddingBottom="3"/>
					</s:layout>
				</s:List>			
			</s:Panel>
		</s:VGroup>
	</s:VGroup>
	
	<s:VGroup right="10" top="11" width="102"
			  id="optionsContainer"
			  verticalAlign="top" horizontalAlign="center">
		<s:Label width="100%" color="#8C8C8C" fontFamily="Arial"
				 text="{_data.instances.length} {_data.instances.length === 1 ? 'copy' : 'copies'}, {_data.instancesUsed} used"
				 fontStyle="italic" fontWeight="normal"
				 textAlign="center" verticalAlign="top"/>
		
		<mx:PopUpButton width="100%" label="Options" fontFamily="Arial"
						openAlways="true"
						popUp="{menu}" />
		
		<mx:LinkButton click="toggleDetails()"
					   width="100%"
					   label.normal="Show Details..."
					   label.expanded="Hide Details..."
					   color="#8C8C8C"/>
	</s:VGroup>
	
	
</s:ItemRenderer>
