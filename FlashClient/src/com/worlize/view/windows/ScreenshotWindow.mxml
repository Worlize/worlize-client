<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  titleBarColor="#c5c5c5"
						  titleTextColor="#444444"
						  title="Share a Snapshot"
						  resizable="false"
						  close="close()"
						  windowIcon="@Embed('assets/icons/large/w_icon_screenshot.png')"
						  currentState="normal"
						  width="525"
						  height="400" xmlns:controls="controls.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.interactivity.model.InteractivityUser;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.PreferencesManager;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.graphics.codec.JPEGEncoder;
			import mx.managers.PopUpManager;
			
			import ru.inspirit.net.MultipartURLLoader;
			private static var _open:Boolean = false;
			private static var _instance:WorlizeWindow;
			
			private var jpegData:ByteArray;
			private var _bitmapData:BitmapData;
			public var facebookPhotoId:String;
			public var users:Vector.<InteractivityUser>;
			protected var facebookAccessToken:String;
			
			[Bindable]
			private var ready:Boolean = false;
			
			public static var externalInterfaceCallbackRegistered:Boolean = false;
			
			[Bindable(event="bitmapDataChanged")]
			public function set bitmapData(newValue:BitmapData):void {
				if (_bitmapData !== newValue) {
					_bitmapData = newValue;
					ready = false;
					jpegData = null;
					dispatchEvent(new FlexEvent("bitmapDataChanged"));
				}
			}
			
			public function get bitmapData():BitmapData {
				return _bitmapData;
			}
			
			public static function getInstance():ScreenshotWindow {
				if (_instance === null) {
					_instance = new ScreenshotWindow();
				}
				return _instance as ScreenshotWindow;
			}
			
			public function encode():void {
				currentState = "encoding";
				ready = false;
				var timer:Timer = new Timer(10, 1);
				timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {
					var encoder:JPEGEncoder = new JPEGEncoder(90);
					jpegData = encoder.encode(bitmapData);
					currentState = "normal";
					ready = true;
				});
				timer.start();
			}
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}
			
			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						_instance = new DirectoryWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					PopUpManager.centerPopUp(_instance);
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance) {
					var window:ScreenshotWindow = (_instance as ScreenshotWindow);
					window.bitmapData.dispose();
					window.bitmapData = null;
					window.jpegData = null;
					PopUpManager.removePopUp(window);
					_open = false;
				}
			}
			
			private function pad(number:uint):String {
				var string:String = number.toString();
				if (string.length < 2) {
					string = "0" + string;
				}
				return string;
			}
			
			private function saveImage():void {
				var ref:FileReference = new FileReference();
				var date:Date = new Date();
				var formatter:DateFormatter = new DateFormatter();
				formatter.formatString = "YYYY-MM-DD at KK.NN.SS A";
				var fileName:String = (
					"Worlize Screenshot " +
					formatter.format(date) +
					".jpg"
				);
				ref.save(jpegData, fileName);					
			}
			
			private function getFacebookAccessToken():void {
				facebookAccessToken = ExternalInterface.call('FB.getAccessToken');
			}
			
			private function uploadToFacebook():void {
				getFacebookAccessToken();
				if (facebookAccessToken) {
					doFacebookUpload();
				}
				else {
					ExternalInterface.addCallback('fbLoginForSnapshotComplete', handleFacebookLoginComplete);
					ExternalInterface.call('fbLoginForSnapshot');
				}
			}
			
			private function doFacebookUpload():void {
				currentState = "uploading";
				var client:InteractivityClient = InteractivityClient.getInstance();
				var linkURL:String = "https://www.worlize.com/rooms/" + client.currentRoom.id + "/enter";
				var urlRequest:URLRequest = new URLRequest("https://graph.facebook.com/me/photos");
				var urlLoader:MultipartURLLoader = new MultipartURLLoader();
				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
				urlLoader.addEventListener(Event.COMPLETE, handleUploadComplete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleUploadIOError);
				urlLoader.addVariable("message", client.currentRoom.name + " at " + client.currentWorld.name + " \n" + linkURL);
				urlLoader.addVariable("access_token", facebookAccessToken);
//				urlLoader.addVariable("no_story", "1");
				urlLoader.addFile(jpegData, "screenshot.jpg", "source", "image/jpeg");
				urlLoader.load("https://graph.facebook.com/me/photos");
			}
			
			private function handleFacebookLoginComplete():void {
				getFacebookAccessToken();
				if (facebookAccessToken) {
					doFacebookUpload();
				}
			}
			
			private function handleUploadComplete(event:Event):void {
				currentState = "uploadComplete";
//				Alert.show("Your snapshot has been uploaded to the Worlize Photos photo album on Facebook", "Upload Complete");
				var loader:MultipartURLLoader = event.target as MultipartURLLoader;
				var result:String = loader.loader.data;
				var resultJSON:Object;
				try {
					resultJSON = JSON.parse(result);
				}
				catch(e:Error) {
					// Facebook fail.
					return;
				}
				
				var timer:Timer = new Timer(3000, 1);
				timer.addEventListener(TimerEvent.TIMER, function(event:TimerEvent):void {
					currentState = "normal";
					close();
				});
				timer.start();
				
//				tagFacebookUsers(resultJSON.id);
			}
			
			private function handleUploadIOError(event:IOErrorEvent):void {
				currentState = "normal";
				Alert.show("There was an IO Error while uploading the snapshot.", "IO Error");
			}
			
			private function tagFacebookUsers(facebookPhotoId:String):void {
				var userId:String = ExternalInterface.call("FB.getUserID");
				var request:URLRequest = new URLRequest("https://graph.facebook.com/" + facebookPhotoId + "/tags");
				var loader:URLLoader = new URLLoader();
				var tags:Array = [];
				var params:URLVariables = new URLVariables();
				
				for each (var user:InteractivityUser in users) {
					if (user.isSelf) {
						tags.push({
							id: userId,
							tag_text: user.name,
							x: user.x,
							y: user.y
						});
						params.to = userId;
						params.tag_text = user.name;
						params.x = user.x;
						params.y = user.y;
						break;
					}
				}
				request.method = URLRequestMethod.POST;
				params.access_token = facebookAccessToken;
//				params.tags = JSON.stringify(tags);
				
				request.data = params;
				
				loader.addEventListener(Event.COMPLETE, handleTaggingComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, handleTaggingIOError);
				loader.load(request);
			}
			
			private function handleTaggingComplete(event:Event):void {
				Alert.show("Tagging photo complete.", "Done!");
			}
			
			private function handleTaggingIOError(event:IOErrorEvent):void {
				Alert.show("There was an IO Error while tagging the photo.", "IO Error");
			}

		]]>
	</fx:Script>
	
	<components:states>
		<s:State name="normal" />
		<s:State name="encoding" stateGroups="overlay" />
		<s:State name="uploading" stateGroups="overlay" />
		<s:State name="uploadComplete" stateGroups="overlay" />
	</components:states>

	
	<s:VGroup top="10" left="10" right="10" bottom="10"
			  horizontalAlign="center">
		<s:Group>
			<s:Image id="previewImage" width="475" height="285" scaleMode="zoom" source="{bitmapData}" />
			<s:Group id="overlay"
					 verticalCenter="0" horizontalCenter="0"
					 alpha.normal="0"
					 alpha.overlay="1.0">
				<s:Rect radiusX="10" radiusY="10" top="0" right="0" bottom="0" left="0">
					<s:fill>
						<s:SolidColor color="#000000" alpha="0.4" />
					</s:fill>
				</s:Rect>
				<s:Label styleName="snapshotOverlay"
						 text.encoding="Encoding Image..."
						 text.uploading="Uploading..."
						 text.uploadComplete="Upload Complete!">
					<s:filters>
						<s:DropShadowFilter color="#000000" blurX="0" blurY="0"
											angle="270" distance="1" />
					</s:filters>
				</s:Label>
			</s:Group>
		</s:Group>
		<s:HGroup gap="10">
			<s:Button label="Save As..." click="saveImage()" enabled="{ready}" />
			<s:Button label="Upload to Facebook" click="uploadToFacebook()" enabled="{ready}" />
		</s:HGroup>
	</s:VGroup>
	
	
	
</components:WorlizeWindow>
