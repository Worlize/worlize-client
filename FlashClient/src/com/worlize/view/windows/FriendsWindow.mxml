<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeFloatingPanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
								 xmlns:s="library://ns.adobe.com/flex/spark" 
								 xmlns:mx="library://ns.adobe.com/flex/mx"
								 xmlns:components="com.worlize.view.components.*"
								 titleBarColor="#1076a4"
								 showTitle="false"
								 showCloseButton="false"
								 mouseDownOutside="handleMouseDownOutside(event)"
								 removedFromStage="handleRemovedFromStage()"
								 currentState="myFriends"
								 width="300" xmlns:code="http://code.google.com/p/flexlib/" xmlns:layout="flexlib.scheduling.scheduleClasses.layout.*" xmlns:controls="controls.*">
	
	<components:states>
		<s:State name="myFriends" />
		<s:State name="findFriends" />
	</components:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.FriendsListEvent;
			import com.worlize.model.FriendsList;
			import com.worlize.model.FriendsListEntry;
			import com.worlize.model.PendingFriendsListEntry;
			import com.worlize.view.itemrenderers.FriendListItemRenderer;
			import com.worlize.view.itemrenderers.PendingFriendInvitationItemRenderer;
			import com.worlize.view.skins.DynamicHeightListSkin;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.skins.spark.DefaultItemRenderer;
			
			private static var _open:Boolean = false;
			private static var _instance:FriendsWindow;
			private static var closedAt:Date;
			
			private var _friendsList:FriendsList;
			
			[Bindable(event="friendsListChange")]
			public function set friendsList(newValue:FriendsList):void {
				if (_friendsList !== newValue) {
					if (_friendsList) {
						_friendsList.removeEventListener('stateChange', handleFriendsListStateChange);
					}
					_friendsList = newValue;
					if (_friendsList) {
						_friendsList.addEventListener('stateChange', handleFriendsListStateChange);
						if (friendsList.state == FriendsList.STATE_LOADING) {
							loadingSpinner.visible = true;
							loadingSpinner.play();
						}
					}
					dispatchEvent(new FlexEvent("friendsListChange"));
				}
			}
			public function get friendsList():FriendsList {
				return _friendsList;
			}
			
			private function handleRemovedFromStage():void {
				loadingSpinner.visible = false;
				loadingSpinner.stop();
			}
			
			private function handleFriendsListStateChange(event:Event):void {
				if (friendsList.state == FriendsList.STATE_LOADING) {
					trace("Showing spinner.");
					loadingSpinner.visible = true;
					loadingSpinner.play();
				}
				else {
					trace("Hiding spinner.");
					loadingSpinner.stop();
					loadingSpinner.visible = false;
				}
			}
			
			private function handleMouseDownOutside(event:MouseEvent):void {
				FriendsWindow.close();
			}
			
			public static function get isOpen():Boolean {
				return _open;
			}
			
			private static var lockCounter:int = 0;
			public static function lockOpen():void {
				lockCounter ++;
			}
			
			public static function releaseLock():void {
				lockCounter --;
			}
			
			public static function open(parent:DisplayObject):void {
				if (closedAt && closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				}
				
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					_instance = new FriendsWindow();
					_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
						close();
					});
					PopUpManager.addPopUp(_instance, parent);
					_instance.friendsList = FriendsList.getInstance();
					_instance.friendsList.load();
					_instance.x = 130;
					_instance.y = 30;
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance && lockCounter <= 0) {
					lockCounter = 0;
					_instance.friendsList = null;
					PopUpManager.removePopUp(_instance);
					_open = false;
					_instance = null;
					closedAt = new Date();
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

	</fx:Declarations>
	
	<s:VGroup width="100%" gap="0">
		<s:HGroup gap="0" width="100%"
				  paddingBottom="3" paddingTop="3"
				  paddingLeft="1" paddingRight="5"
				  verticalAlign="middle">
			<mx:LinkButton
				styleName="friendsNavButton"
				color="#000000"
				color.myFriends="#c18a13"
				click="currentState = 'myFriends';"
				label="My Friends" />
			<mx:LinkButton
				styleName="friendsNavButton"
				color="#000000"
				color.findFriends="#c18a13"
				click="currentState = 'findFriends';"
				label="Search" />
			<mx:Spacer width="100%" />
			<controls:Spinner id="loadingSpinner"
							  visible="false"
							  autoPlay="false"
							  mouseEnabled="false"
							  mouseChildren="false"
							  size="19" numTicks="9"
							  tickWidth="2" speed="600"
							  fadeSpeed="600" tickColor="#444444" />
		</s:HGroup>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="#DDDDDD" />
			</s:stroke>
		</s:Line>
		
		<s:VGroup width="100%" includeIn="myFriends" gap="0">

			<s:VGroup width="100%" gap="0"
					  visible="{friendsList.friendRequests.length > 0}"
					  includeInLayout="{friendsList.friendRequests.length > 0}">
				<s:Group width="100%">
					<s:Rect top="0" left="0" right="0" bottom="0">
						<s:fill>
							<s:SolidColor color="#8dc85d" />
						</s:fill>
					</s:Rect>
					<s:Label left="6" top="8" bottom="6"
							 fontFamily="PTSansNarrowBold"
							 fontSize="14" color="#000000"
							 text="Friend Requests" />
				</s:Group>
				
				<components:DynamicHeightList
					width="100%"
					dataProvider="{friendsList.friendRequests}"
					maxRowCount="3"
					borderVisible="false"
					itemRenderer="com.worlize.view.itemrenderers.PendingFriendInvitationItemRenderer" />
			</s:VGroup>
			
			<s:VGroup width="100%" gap="0"
					  visible="{friendsList.friends.length > 0}"
					  includeInLayout="{friendsList.friends.length > 0}">

				<s:Group width="100%">
					<s:Rect top="0" left="0" right="0" bottom="0">
						<s:fill>
							<s:SolidColor color="#90d1ee" />
						</s:fill>
					</s:Rect>
					<s:Label left="6" top="8" bottom="6"
							 fontFamily="PTSansNarrowBold"
							 fontSize="14" color="#000000"
							 text="My Friends" />
				</s:Group>
				
				<components:DynamicHeightList
					width="100%"
					maxRowCount="5"
					dataProvider="{friendsList.friends}"
					borderVisible="false"
					itemRenderer="com.worlize.view.itemrenderers.FriendListItemRenderer" />
			</s:VGroup>
			
			<s:VGroup width="100%" height="100"
					  visible="{friendsList.friends.length == 0 &amp;&amp; friendsList.friendRequests.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  includeInLayout="{friendsList.friends.length == 0 &amp;&amp; friendsList.friendRequests.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  verticalAlign="middle"
					  horizontalAlign="center">
				<s:Label fontFamily="PTSansNarrowBold"
						 fontSize="18"
						 color="#555555"
						 text="You have no friends" />
				<s:Label fontFamily="Arial"
						 fontSize="11"
						 fontStyle="italic"
						 color="#666666"
						 text="(Click 'Search' above to find some.)" />
			</s:VGroup>
		</s:VGroup>
		
		<s:VGroup includeIn="findFriends" width="100%" gap="0">
			<s:Group width="100%">
				<s:Rect top="0" left="0" right="0" bottom="0">
					<s:fill>
						<s:SolidColor color="#e2c879" />
					</s:fill>
				</s:Rect>
				<s:Label left="6" top="8" bottom="6"
						 fontFamily="PTSansNarrowBold"
						 fontSize="14" color="#000000"
						 text="Search for Friends" />
			</s:Group>
			
			<components:FindUsersComponent includeIn="findFriends"
										   width="100%" />
		</s:VGroup>
				
		<components:BetaInvitationForm width="100%" />
	</s:VGroup>
	
</components:WorlizeFloatingPanel>
