<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeFloatingPanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
								 xmlns:s="library://ns.adobe.com/flex/spark" 
								 xmlns:mx="library://ns.adobe.com/flex/mx"
								 xmlns:components="com.worlize.view.components.*"
								 xmlns:code="http://code.google.com/p/flexlib/"
								 xmlns:layout="flexlib.scheduling.scheduleClasses.layout.*"
								 xmlns:controls="controls.*"
								 titleBarColor="#1076a4"
								 showTitle="false"
								 showCloseButton="false"
								 mouseDownOutside="handleMouseDownOutside(event)"
								 removedFromStage="handleRemovedFromStage()"
								 width="300">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.worlize.event.FriendsListEvent;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.FriendsList;
			import com.worlize.model.FriendsListEntry;
			import com.worlize.model.PendingFriendsListEntry;
			import com.worlize.view.itemrenderers.FriendListItemRenderer;
			import com.worlize.view.itemrenderers.PendingFriendInvitationItemRenderer;
			import com.worlize.view.skins.DynamicHeightListSkin;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.skins.spark.DefaultItemRenderer;
			
			private static var _open:Boolean = false;
			private static var _instance:FriendsWindow;
			private static var closedAt:Date;
			
			private var _friendsList:FriendsList;
			
			[Bindable(event="friendsListChange")]
			public function set friendsList(newValue:FriendsList):void {
				if (_friendsList !== newValue) {
					if (_friendsList) {
						_friendsList.removeEventListener('stateChange', handleFriendsListStateChange);
					}
					_friendsList = newValue;
					if (_friendsList) {
						_friendsList.addEventListener('stateChange', handleFriendsListStateChange);
						if (friendsList.state == FriendsList.STATE_LOADING) {
							loadingSpinner.visible = true;
							loadingSpinner.play();
						}
					}
					dispatchEvent(new FlexEvent("friendsListChange"));
				}
			}
			public function get friendsList():FriendsList {
				return _friendsList;
			}
			
			private function handleRemovedFromStage():void {
				loadingSpinner.visible = false;
				loadingSpinner.stop();
			}
			
			private function handleFriendsListStateChange(event:Event):void {
				if (friendsList.state == FriendsList.STATE_LOADING) {
					trace("Showing spinner.");
					loadingSpinner.visible = true;
					loadingSpinner.play();
				}
				else {
					trace("Hiding spinner.");
					loadingSpinner.stop();
					loadingSpinner.visible = false;
				}
			}
			
			private function handleMouseDownOutside(event:MouseEvent):void {
				FriendsWindow.close();
			}
			
			public static function get isOpen():Boolean {
				return _open;
			}
			
			private static var lockCounter:int = 0;
			public static function lockOpen():void {
				lockCounter ++;
			}
			
			public static function releaseLock():void {
				lockCounter --;
			}
			
			public static function open(parent:DisplayObject):void {
				if (closedAt && closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				}
				
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					_instance = new FriendsWindow();
					_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
						close();
					});
					PopUpManager.addPopUp(_instance, parent);
					_instance.friendsList = FriendsList.getInstance();
					_instance.friendsList.load();
					_instance.x = 130;
					_instance.y = 30;
					_open = true;
				}
			}
			
			public static function close():void {
				if (_open && _instance && lockCounter <= 0) {
					lockCounter = 0;
					_instance.friendsList = null;
					PopUpManager.removePopUp(_instance);
					_open = false;
					_instance = null;
					closedAt = new Date();
				}
			}
			
			private function inviteFacebookFriends():void {
				var fbFriendIds:Array = [];
				for (var i:int=0; i < friendsList.friends.length; i++) {
					var friend:FriendsListEntry = friendsList.friends.getItemAt(i) as FriendsListEntry;
					if (friend.friendType === FriendsListEntry.TYPE_FACEBOOK) {
						fbFriendIds.push(friend.facebookId);
					}
				}
				
				ExternalInterface.call('showFacebookDialog', {
					method: 'apprequests',
					message: "Come chat with me in Worlize, a place where you can create your own virtual world and chat with your friends!",
					exclude_ids: fbFriendIds,
					filters: ['all'],
					title: 'Invite Friends to Worlize',
					data: JSON.encode({
						action: 'join',
						inviter_guid: CurrentUser.getInstance().guid
					})
				});
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->

	</fx:Declarations>
	
	<s:VGroup width="100%" gap="0">
		
		<!-- Social Conncetion Callout -->
		<s:Group width="100%" height="39" buttonMode="true" click="inviteFacebookFriends()">
			<s:layout>
				<s:BasicLayout />
			</s:layout>
			<s:Rect top="0" left="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor color="#daeef7" />
				</s:fill>
			</s:Rect>
			<s:HGroup verticalCenter="0" horizontalCenter="0"
					  verticalAlign="middle" horizontalAlign="center">
				<s:Label text="invite your friends:" styleName="socialCallout" />
				<s:Image source="@Embed(source='assets/icons/social/fb-30.png')" />
			</s:HGroup>
		</s:Group>
		
		<s:VGroup width="100%" gap="0">

			<s:VGroup width="100%" gap="0"
					  visible="{friendsList.friendRequests.length > 0}"
					  includeInLayout="{friendsList.friendRequests.length > 0}">
				<s:Group width="100%">
					<s:Rect top="0" left="0" right="0" bottom="0">
						<s:fill>
							<s:SolidColor color="#8dc85d" />
						</s:fill>
					</s:Rect>
					<s:Label left="6" top="8" bottom="6"
							 fontFamily="PTSansNarrowBold"
							 fontSize="14" color="#000000"
							 text="Friend Requests" />
				</s:Group>
				
				<components:DynamicHeightList
					width="100%"
					dataProvider="{friendsList.friendRequests}"
					maxRowCount="3"
					borderVisible="false"
					itemRenderer="com.worlize.view.itemrenderers.PendingFriendInvitationItemRenderer" />
			</s:VGroup>
			
			<s:VGroup width="100%" gap="0"
					  visible="{friendsList.friends.length > 0}"
					  includeInLayout="{friendsList.friends.length > 0}">

				<s:Group width="100%">
					<s:Rect top="0" left="0" right="0" bottom="0">
						<s:fill>
							<s:SolidColor color="#90d1ee" />
						</s:fill>
					</s:Rect>
					<s:Label left="6" top="8" bottom="6"
							 fontFamily="PTSansNarrowBold"
							 fontSize="14" color="#000000"
							 text="Friends" />
					
					<controls:Spinner id="loadingSpinner"
									  visible="false"
									  autoPlay="false"
									  mouseEnabled="false"
									  mouseChildren="false"
									  size="22" numTicks="11"
									  tickWidth="2" speed="600"
									  right="6" top="2"
									  fadeSpeed="500" tickColor="#222222" />
				</s:Group>
				
				<components:DynamicHeightList
					width="100%"
					maxRowCount="8"
					dataProvider="{friendsList.friends}"
					borderVisible="false"
					itemRenderer="com.worlize.view.itemrenderers.FriendListItemRenderer" />
			</s:VGroup>
			
			<s:VGroup width="100%" height="100"
					  visible="{friendsList.friends.length == 0 &amp;&amp; friendsList.friendRequests.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  includeInLayout="{friendsList.friends.length == 0 &amp;&amp; friendsList.friendRequests.length == 0 &amp;&amp; friendsList.state != FriendsList.STATE_LOADING}"
					  verticalAlign="middle"
					  horizontalAlign="center">
				<s:Label fontFamily="PTSansNarrowBold"
						 fontSize="18"
						 color="#555555"
						 text="You have no friends" />
				<s:Label fontFamily="Arial"
						 fontSize="11"
						 fontStyle="italic"
						 color="#666666"
						 text="(Why not invite some?)" />
			</s:VGroup>
		</s:VGroup>
	</s:VGroup>
	
</components:WorlizeFloatingPanel>
