<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="init" />
		<s:State name="error" />
		<s:State name="loading" />
		<s:State name="haveResults" />
		<s:State name="noResults" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.model.WorlizeAsset;
			import com.worlize.model.marketplace.MarketplaceEvent;
			import com.worlize.model.marketplace.MarketplaceSearch;
			import com.worlize.view.itemrenderers.MarketplaceItemRenderer;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.PropertyChangeEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var searchStateWatcher:ChangeWatcher;
			
			private var _search:MarketplaceSearch;
			
			[Bindable(event='searchChanged')]
			public function set search(newValue:MarketplaceSearch):void {
				if (_search !== newValue) {
					if (searchStateWatcher) {
						searchStateWatcher.unwatch();
					}
					
					_search = newValue;
					searchStateWatcher = ChangeWatcher.watch(_search, 'state', handleSearchStateChange);
					_search.addEventListener(MarketplaceEvent.RESULT, handleSearchResults);
					_search.addEventListener(MarketplaceEvent.FAULT, handleSearchFault);
					
					dispatchEvent(new Event('searchChanged'));
				}
			}
			public function get search():MarketplaceSearch {
				return _search;
			}
			
			private function handleSearchStateChange(event:PropertyChangeEvent):void {
				if (event.newValue == MarketplaceSearch.STATE_LOADING) {
					currentState = 'loading';
				}
			}
			
			private function handleSearchResults(event:MarketplaceEvent):void {
				trace("Have search results.");
				if (event.result.length == 0) {
					currentState = 'noResults';
				}
				else {
					currentState = 'haveResults';
					
				}
			}
			
			private function handleSearchFault(event:MarketplaceEvent):void {
				currentState = 'error';
			}
			
			private function handleSelectionChanged(event:IndexChangeEvent):void {
				try {
					selectedItem = WorlizeAsset(search.results.getItemAt(event.newIndex));
				}
				catch(e:Error) {
					selectedItem = null;
				}
			}
			
			[Bindable]
			public var selectedItem:WorlizeAsset;
		]]>
	</fx:Script>
	
	<s:Label includeIn="loading" color="#81734b"
			 fontWeight="bold" fontSize="22"
			 text="loading..." top="0" right="0" bottom="0" left="0"
			 verticalAlign="middle" textAlign="center" />
	
	<s:List dataProvider="{search.results}" width="100%" height="100%" includeIn="haveResults"
			borderVisible="false" change="handleSelectionChanged(event)"
			itemRenderer="com.worlize.view.itemrenderers.MarketplaceItemRenderer">
		<s:layout>
			<s:TileLayout verticalGap="10" horizontalGap="10"
						  horizontalAlign="center" verticalAlign="top" />
		</s:layout>
	</s:List>
	
</s:Group>
