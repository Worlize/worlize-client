<?xml version="1.0" encoding="utf-8"?>
<components:WorlizeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:components="com.worlize.view.components.*"
						  title="My Props"
						  titleBarColor="#e7b957" titleTextColor="#e0a72e" 
						  windowIcon="@Embed('assets/icons/large/w_icon_myprops.png')"
						  minWidth="600" minHeight="200"
						  creationComplete="handleCreationComplete()"
						  dragEnter="handleDragEnter(event)"
						  dragOver="handleDragOver(event)"
						  dragDrop="handleDragDrop(event)"
						  width="600" height="430" xmlns:locker="com.worlize.view.locker.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.components.visualnotification.VisualNotification;
			import com.worlize.control.PropUploader;
			import com.worlize.control.Uploader;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.PreferencesManager;
			import com.worlize.model.PropInstance;
			import com.worlize.model.locker.PropLocker;
			import com.worlize.model.locker.Slots;
			import com.worlize.view.windows.BuyStorageSpaceWindow;
			
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.MenuEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.events.StateChangeEvent;
			import mx.graphics.SolidColor;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.managers.SystemManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TitleWindowBoundsEvent;
			import spark.primitives.Rect;
			private static var _open:Boolean = false;
			private static var _instance:WorlizeWindow;
			
			[Bindable]
			private var propLocker:PropLocker = PropLocker.getInstance();
			
			[Bindable]
			private var propUploader:PropUploader = new PropUploader();
			
			public static function toggleOpen(parent:DisplayObject):void {
				if (_open) {
					close();
				}
				else {
					open(parent);
				}
			}
			
			public static function open(parent:DisplayObject):void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				if (_open) {
					PopUpManager.bringToFront(_instance);
					_instance.setFocus();
				}
				else {
					var needsPosition:Boolean = false;
					if (!_instance) {
						needsPosition = true;
						_instance = new PropsWindow();
						_instance.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
							close();
						});
					}
					PopUpManager.addPopUp(_instance, parent);
					if (needsPosition) {
						var coordinates:Array = preferences.getPreference('propsLockerPosition') as Array;
						var size:Array = preferences.getPreference('propsLockerSize') as Array;
						if (coordinates && size &&
							_instance.boundsAreValid(coordinates[0], coordinates[1], size[0], size[1]))
						{
							_instance.x = coordinates[0];
							_instance.y = coordinates[1];
							_instance.width = size[0];
							_instance.height = size[1];
						}
						else {
							PopUpManager.centerPopUp(_instance);
						}
					}
					_open = true;
				}
			}
			
			private function saveSizeAndPosition():void {
				var preferences:PreferencesManager = PreferencesManager.getInstance();
				preferences.setPreference('propsLockerPosition', [x,y]);
				preferences.setPreference('propsLockerSize', [width, height]);
			}
			
			public static function close():void {
				if (_open && _instance) {
					PopUpManager.removePopUp(_instance);
					_open = false;
				}
			}
			
			private function handleCreationComplete():void {
				addEventListener(ResizeManager.RESIZE_END, function(event:ResizeEvent):void {
					saveSizeAndPosition();
				});
				addEventListener(TitleWindowBoundsEvent.WINDOW_MOVE_END, function(event:TitleWindowBoundsEvent):void {
					saveSizeAndPosition();
				});
				
				// Load initial data
//				propLocker.load();
				
				propUploader.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, handleUploadStateChange);
			}
			
			private function uploadProp():void {
				if (propLocker.emptySlots > 0) {
					propUploader.browse();
				}
				else {
					Alert.show(
						"You don't have enough space!  You'll have to delete some old props to make room, or buy some more space.  Would you like to buy more space now?",
						"Aww, man!",
						Alert.YES | Alert.NO,
						null,
						function(event:CloseEvent):void {
							if (event.detail === Alert.YES) {
								showBuySlotsWindow();
							}
						}
					); 
				}
			}
			
			private function handleUploadStateChange(event:StateChangeEvent):void {
				if (event.newState == Uploader.STATE_READY) {
					uploadButton.enabled = true;
				}
				else {
					uploadButton.enabled = false;
				}
			}
			
			private function showBuySlotsWindow():void {
				BuyStorageSpaceWindow.open('prop', systemManager.getSandboxRoot());
			}
			
			protected function handleDragEnter(event:DragEvent):void {
				if (event.dragSource.hasFormat('propInRoom')) {
					var data:Object = event.dragSource.dataForFormat('propInRoom');
					if (!propLocker.hasPropGuid(data.looseProp.prop.guid)) {
						DragManager.acceptDragDrop(event.target as IUIComponent);
					}
				}
			}
			
			protected function handleDragOver(event:DragEvent):void {
				if (event.dragSource.hasFormat('propInRoom')) {
					DragManager.showFeedback(DragManager.COPY);
				}
			}
			
			protected function handleDragDrop(event:DragEvent):void {
				if (event.dragSource.hasFormat('propInRoom')) {
					var data:Object = event.dragSource.dataForFormat('propInRoom');
					if (!propLocker.hasPropGuid(data.looseProp.prop.guid)) {
						propLocker.savePropFromRoom(data.looseProp.prop.guid);
					}
				}
			}
			
		]]>
	</fx:Script>
	
	
	
	<components:controlBarContent>
		<components:UploadProgressIndicator
			uploader="{propUploader}" />
		
		<mx:LinkButton
			id="uploadButton"
			click="uploadProp()"
			styleName="lockerNavButton"
			color="#2b9610"
			icon="@Embed(source='src/assets/icons/icon_upload.png')"
			label="Upload" />
		
		<components:CapacityButton
			click="showBuySlotsWindow()"
			line1="Capacity: {CurrentUser.getInstance().slots.propSlots}"
			line2="Used: {propLocker.count}"
			toolTip="Click to buy more locker space"/>
		
		<!--
		<mx:Spacer width="20" />
		<mx:LinkButton
		styleName="topNavButton"
		color="#B58B0B"
		icon="@Embed(source='src/assets/icons/icon_marketplace.png')"
		click="MarketplaceWindow.toggleOpen(systemManager.getSandboxRoot())"
		label="Marketplace" />
		-->
	</components:controlBarContent>
	
	
	<s:VGroup top="10" left="10" right="10" bottom="10" gap="10">
		<s:Group id="props" width="100%" height="100%">
			<!--
			<s:Rect top="0" right="0" left="0" bottom="0">
			<s:stroke>
			<s:SolidColorStroke color="#DDDDDD" weight="1" />
			</s:stroke>
			</s:Rect>
			-->
			<s:List top="1" right="1" left="1" bottom="1"
					id="propsList" dataProvider="{propLocker.propInstances}"
					borderVisible="false"
					itemRenderer="com.worlize.view.itemrenderers.PropLockerItemRenderer">
				<s:layout>
					<s:TileLayout verticalGap="10" horizontalGap="10" />
				</s:layout>
			</s:List>			
		</s:Group>
	</s:VGroup>
	
</components:WorlizeWindow>
