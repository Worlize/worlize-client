<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:view="com.worlize.interactivity.view.*" xmlns:code="http://code.google.com/p/flexlib/"
	creationComplete="handleCreationComplete()"
	click="handleTitleClicked(event)"
	width="950"
	currentState="disconnected" xmlns:layout="flexlib.scheduling.scheduleClasses.layout.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view1="com.worlize.interactivity.view.*">
	
	<s:states>
		<s:State name="disconnected" />
		<s:State name="connecting" />
		<s:State name="connected" stateGroups="ready" />
		<s:State name="authormode" stateGroups="ready" />
	</s:states>
	
	<s:filters>
		<s:GlowFilter blurX="4" blurY="4" alpha="0.47" color="#000000" quality="{BitmapFilterQuality.MEDIUM}" />
	</s:filters>
	
	<fx:Metadata>
		[Event(name="securityError", type="com.worlize.interactivity.event.InteractivitySecurityErrorEvent")]
	</fx:Metadata>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.command.CreateHotspotCommand;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.event.InteractivitySecurityErrorEvent;
			import com.worlize.interactivity.event.RoomSelectedEvent;
			import com.worlize.interactivity.iptscrae.command.CLIENTTYPECommand;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.view.author.MyBackgroundsWindow;
			import com.worlize.view.author.MyGamesWindow;
			import com.worlize.view.author.MyMediaWindow;
			import com.worlize.view.author.MyObjectsWindow;
			import com.worlize.view.author.properties.RoomPropertiesWindow;
			import com.worlize.view.components.RoomListDataGrid;
			import com.worlize.view.components.UserListDataGrid;
			import com.worlize.view.windows.LogWindow;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			[Bindable]
			public var client:InteractivityClient; 
			
			private var chatHistory:Array = [];
			private var chatIndex:Number = 0;
			
			// Timer required because in Flex 4 the chat box won't clear
			// immediately in response to the keydown event
			private var timer:Timer = new Timer(10, 1);
			
			private function handleTitleClicked(e:MouseEvent):void{
				// FIXME: Find a better way to de-select the currently selected user.
				if(e.target.name == "Label50")//need to make go from type titleDisplay
				{
					client.currentRoom.selectedUser = null;
				}
	
			}
			
			private function handleCreationComplete():void {
				timer.addEventListener(TimerEvent.TIMER, clearChatBox);
				roomView.addEventListener(MouseEvent.MOUSE_UP, handleRoomMouseUp);
			}
						
			private function handleChatKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					client.say(chatBox.text);
					timer.reset();
					timer.start();
				}
				else if (event.keyCode == Keyboard.UP) {
					if (chatIndex == chatHistory.length &&
						chatBox.text.length > 0) {
						chatHistory.push(chatBox.text);
					}
					
					if (chatIndex > 0) {
						chatIndex--;
					}
					
					chatBox.text = chatHistory[chatIndex];
					moveCursorToEnd();
				}
				else if (event.keyCode == Keyboard.DOWN){
					if (chatIndex < chatHistory.length) {
						chatIndex++;
					}
					else if (chatIndex == chatHistory.length &&
							 chatBox.text.length > 0) {
						chatHistory.push(chatBox.text);
						chatIndex++;
					}
					chatBox.text = chatHistory[chatIndex];	
					moveCursorToEnd();
				}
				else if (event.keyCode == Keyboard.ESCAPE) {
					chatIndex = chatHistory.length;
					chatBox.text = "";
				}
			}
			
			private function moveCursorToEnd():void {
				chatBox.selectionBeginIndex = chatBox.selectionEndIndex = chatBox.text.length;
			}
			
			private function clearChatBox(event:TimerEvent):void {
				chatHistory.push(chatBox.text);
				chatIndex = chatHistory.length;
				chatBox.text = "";
			}

			private function handleRoomMouseUp(event:MouseEvent):void {
				focusManager.setFocus(chatBox);
				moveCursorToEnd();
			}

			private function handleSecurityError(event:InteractivitySecurityErrorEvent):void {
				dispatchEvent(event.clone());
			}
			
			private function clearStatusMessage():void {
				client.currentRoom.clearStatusMessage();
			}
			
			private function handleAvatarsClick():void {
				LockerWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handlePropsClick():void {
				LockerWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleBackgroundsClick():void {
				MyBackgroundsWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleObjectsClick():void {
				MyObjectsWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleGamesClick():void {
				MyGamesWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleMediaClick():void {
				MyMediaWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function createHotspot():void {
				client.currentRoom.createHotspot();
			}
			
			private var stateBeforeAuthorMode:String;
			private function toggleAuthorMode():void {
				var event:AuthorModeNotification;
				
				if (currentState == 'authormode') {
					// disable authormode
					currentState = stateBeforeAuthorMode;
					event = new AuthorModeNotification(AuthorModeNotification.AUTHOR_DISABLED);
				}
				else {
					// enable authormode
					stateBeforeAuthorMode = currentState;
					currentState = 'authormode';
					event = new AuthorModeNotification(AuthorModeNotification.AUTHOR_ENABLED);
				}
				NotificationCenter.postNotification(event);				
			}
			
			
			private function toggleLogWindow():void {
				if (LogWindow.isOpen) {
					LogWindow.close();
				}
				else {
					LogWindow.open(systemManager.getSandboxRoot());
				}
			}
			
			private function handleAreaSettingsClick():void {
				RoomPropertiesWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function showRoomList():void {
				if (RoomListDataGrid.closedAt && RoomListDataGrid.closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				} 
				if (client.currentWorld.guid) {
					client.currentWorld.load(client.currentWorld.guid);
				}
				var roomList:RoomListDataGrid = new RoomListDataGrid();
				roomList.x = stage.mouseX + 15;
				roomList.y = stage.mouseY + 15;
				PopUpManager.addPopUp(roomList, systemManager.getSandboxRoot());
			}
			
			private function showUserList():void {
				if (UserListDataGrid.closedAt && UserListDataGrid.closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				}
				client.currentWorld.userList.load();
				var userList:UserListDataGrid = new UserListDataGrid();
				userList.x = stage.mouseX + 15;
				userList.y = stage.mouseY + 15;
				PopUpManager.addPopUp(userList, systemManager.getSandboxRoot());
			}
		]]>
	</fx:Script>
	
	<s:BorderContainer
		borderVisible="false"
		backgroundColor="#f0f0f1"
		top="0" left="0" right="0" height="21">
		
		<s:Group left="0" top="0">
			<s:layout>
				<s:HorizontalLayout gap="3" paddingTop="3" paddingLeft="6"
									verticalAlign="middle"/>
			</s:layout>
			
			<mx:Image
				id="backButton"
				toolTip="Go Back"
				buttonMode="{client.roomHistoryManager.canGoBack}" useHandCursor="{client.roomHistoryManager.canGoBack}"
				alpha="{client.roomHistoryManager.canGoBack ? 1 : 0.5}"
				click="client.roomHistoryManager.goBack();"
				source="@Embed(source='src/assets/icons/icon_back.png')"
				scaleContent="false"
				verticalAlign="top"
				horizontalAlign="left"
				width="17"
				height="17"
				/>
			<mx:Image
				id="forwardButton"
				toolTip="Go Forward"
				buttonMode="{client.roomHistoryManager.canGoForward}" useHandCursor="{client.roomHistoryManager.canGoForward}"
				alpha="{client.roomHistoryManager.canGoForward ? 1 : 0.5}"
				click="client.roomHistoryManager.goForward();"
				source="@Embed(source='src/assets/icons/icon_forward.png')"
				scaleContent="false"
				verticalAlign="top"
				height="17" />
			<mx:Spacer width="15" />
			
			<s:Label
				id="worldTitle"
				styleName="chatWindowWorldTitle"
				text="{client.currentWorld.name}" />
			
			<mx:Spacer width="20" />
			
			<s:Label
				click="showRoomList()"
				id="roomTitle"
				styleName="chatWindowWorldTitle"
				toolTip="Click for Area List"
				text="{client.currentRoom.name}" />
			
			<mx:Image source="@Embed(source='src/assets/icons/icon_room_list_dropdown.png')"
					  click="showRoomList()"
					  scaleContent="false"
					  verticalAlign="top"
					  width="15" height="17" />
			
			<mx:Spacer width="12" />
			
			<s:Label
				click="showUserList()"
				styleName="chatWindowVisitorsTitle"
				toolTip="Click for User List"
				text="Visitors: {client.currentWorld.userList.users.length}" />
				
			<mx:Image source="@Embed(source='src/assets/icons/icon_visitor_list_dropdown.png')"
					  click="showUserList()"
					  scaleContent="false"
					  verticalAlign="top"
					  width="15" height="17" />
			
		</s:Group>
		
	</s:BorderContainer>
	
	
	<s:Group top="21" left="0">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
		
		<view1:RoomView id="roomView"
							 enabled="{client.connected}"
							 securityError="handleSecurityError(event)"
							 room="{client.currentRoom}" />
	</s:Group>

	<s:Rect bottom="0" left="0" right="0" height="26">
		<s:fill>
			<s:SolidColor color="#f0f0f1" alpha="0.55" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup bottom="3" left="431" gap="6">
		
		<mx:Image useHandCursor="true" buttonMode="true"
				  toolTip="Log Window"
				  click="toggleLogWindow()"
				  source="@Embed(source='src/assets/icons/icon_log.png')" />
		
		<mx:Image useHandCursor="true" buttonMode="true"
				  toolTip="Avatars Locker" source="@Embed(source='src/assets/icons/icon_mylocker.png')"
				  click="handleAvatarsClick()" />
	
	</s:HGroup>

	<s:HGroup
		bottom="3" right="3">
		<s:HGroup id="authorIcons" includeIn="authormode"
				  verticalAlign="middle">
			<mx:Image useHandCursor="true" buttonMode="true"
					  toolTip="Create New Area"
					  click="client.createNewRoom()"
					  source="@Embed(source='src/assets/icons/icon_new_room.png')"
					  visible="{client.currentWorld.canCreateNewRoom}"
					  includeInLayout="{client.currentWorld.canCreateNewRoom}" />
			<mx:Spacer width="10" />
			<mx:Image useHandCursor="true" buttonMode="true"
				toolTip="Create new Door" source="@Embed(source='src/assets/icons/icon_author_door.png')"
				click="createHotspot()" />
			<mx:Image useHandCursor="true" buttonMode="true"
				toolTip="Backgrounds" source="@Embed(source='src/assets/icons/icon_author_bkg.png')"
			    click="handleBackgroundsClick()" />
			<mx:Image useHandCursor="true" buttonMode="true"
				toolTip="Objects" source="@Embed(source='src/assets/icons/icon_author_object.png')"
				click="handleObjectsClick()" />
			<mx:Image toolTip="Area Settings"
				click="handleAreaSettingsClick()"
				useHandCursor="true" buttonMode="true"
				source="@Embed(source='src/assets/icons/icon_room_settings.png')"
			  	visible="{client.canAuthor}" includeInLayout="{client.canAuthor}" />
		</s:HGroup>
		<mx:Image
			toolTip="Author Mode"
			visible="{client.canAuthor}"
			includeInLayout="{client.canAuthor}"
			useHandCursor="true" buttonMode="true"
			source="@Embed(source='src/assets/icons/icon_authormode_grey.png')"
			source.authormode="@Embed(source='src/assets/icons/icon_authormode_red.png')"
			click="toggleAuthorMode();"/>
	</s:HGroup>
	
	<code:PromptingTextInput
		bottom="3" height="21" left="3"
		focusRect="false"
		focusAlpha="0"
		width="421"
		prompt="Type here to chat..."
		borderVisible="false"
	 	fontStyle="{client.currentRoom.selectedUser ? 'italic' : 'normal'}"
		paddingLeft="4"
		paddingTop="1"
		enabled="{client.connected}"
		id="chatBox" keyDown="handleChatKeyDown(event);" maxChars="254"/>
	
	<s:Label includeIn="connecting"
			 color="#AAAAAA" fontSize="15"
			 horizontalCenter="0" verticalCenter="0"
			 text="Connecting..." />
</s:Group>
