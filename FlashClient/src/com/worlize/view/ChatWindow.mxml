<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:view="com.worlize.interactivity.view.*"
	xmlns:code="http://code.google.com/p/flexlib/"
	xmlns:layout="flexlib.scheduling.scheduleClasses.layout.*"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:view1="com.worlize.interactivity.view.*"
	xmlns:components="com.worlize.view.components.*"
	creationComplete="handleCreationComplete()"
	initialize="handleInitialize(event)"
	currentState="disconnected">
	
	<s:states>
		<s:State name="disconnected" />
		<s:State name="connecting" />
		<s:State name="connected" stateGroups="ready" />
		<s:State name="authormode" stateGroups="ready" />
	</s:states>
	
	<s:filters>
		<s:GlowFilter blurX="5" blurY="5" alpha="0.47" color="#000000" quality="{BitmapFilterQuality.LOW}" />
	</s:filters>
	
	<fx:Metadata>
		[Event(name="securityError", type="com.worlize.interactivity.event.InteractivitySecurityErrorEvent")]
	</fx:Metadata>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.command.CreateHotspotCommand;
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.api.AppLoader;
			import com.worlize.interactivity.event.InteractivitySecurityErrorEvent;
			import com.worlize.interactivity.event.RoomSelectedEvent;
			import com.worlize.interactivity.iptscrae.command.CLIENTTYPECommand;
			import com.worlize.interactivity.model.WebcamBroadcastManager;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.WorldDefinition;
			import com.worlize.notification.WorlizeNotification;
			import com.worlize.state.AuthorModeState;
			import com.worlize.view.author.MyBackgroundsWindow;
			import com.worlize.view.author.MyGamesWindow;
			import com.worlize.view.author.MyMediaWindow;
			import com.worlize.view.author.MyObjectsWindow;
			import com.worlize.view.components.RoomListDataGrid;
			import com.worlize.view.components.UserListDataGrid;
			import com.worlize.view.windows.LogWindow;
			import com.worlize.view.windows.WorldPropertiesWindow;
			
			import flash.filters.BitmapFilterQuality;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.core.Application;
			import mx.core.ITextInput;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.RichEditableText;
			import spark.components.supportClasses.SkinnableTextBase;
			[Bindable]
			public var client:InteractivityClient; 
			
			[Bindable]
			private var authorModeState:AuthorModeState = AuthorModeState.getInstance();
			
			private var chatHistory:Array = [];
			private var chatIndex:Number = 0;
			
			// Timer required because in Flex 4 the chat box won't clear
			// immediately in response to the keydown event
			private var timer:Timer = new Timer(10, 1);
			
			private function handleCreationComplete():void {
				timer.addEventListener(TimerEvent.TIMER, clearChatBox);
				roomView.addEventListener(MouseEvent.MOUSE_UP, handleRoomMouseUp);
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.addListener(WorlizeNotification.FOCUS_CHAT_BOX_NOTIFICATION, handleFocusChatBoxNotification);
				setTimeout(function():void {
					recalculateScaleFactor();		
				}, 750);
			}
			
			protected function handleInitialize(event:FlexEvent):void {
				addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);
				addEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage);
			}
			
			private function handleAddedToStage(event:Event):void {
				stage.addEventListener(Event.RESIZE, handleStageResize);
			}
			
			private function handleRemovedFromStage(event:Event):void {
				stage.removeEventListener(Event.RESIZE, handleStageResize);
			}
			
			private function handleStageResize(event:Event):void {
				recalculateScaleFactor();
			}
			
			private function recalculateScaleFactor():void {
				callLater(function():void {
					var topLeftGlobal:Point = roomView.localToGlobal(new Point(roomView.x,roomView.y));
					var requiredWidth:int = topLeftGlobal.x + roomView.width + 10;
					var requiredHeight:int = topLeftGlobal.y + roomView.height + bottomBar.height;
					var scaleFactorX:Number = 1.0;
					var scaleFactorY:Number = 1.0;
					var scaleFactor:Number = 1.0;
					if (requiredWidth > stage.width) {
						scaleFactorX = (stage.width - topLeftGlobal.x - 10) / roomView.width;
					}
					if (requiredHeight > stage.height) {
						scaleFactorY = (stage.height - topLeftGlobal.y) / roomView.height;
					}
					scaleFactor = Math.min(scaleFactorX, scaleFactorY);
					if (roomView.scaleFactor !== scaleFactor) {
						roomView.scaleFactor = scaleFactor;
					}
				});
			}
			
			private function handleFocusChatBoxNotification(event:WorlizeNotification):void {
				focusChatBox();
			}
						
			private function handleChatKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					client.say(chatBox.text);
					timer.reset();
					timer.start();
				}
				else if (event.keyCode == Keyboard.UP) {
					if (chatIndex == chatHistory.length &&
						chatBox.text.length > 0) {
						chatHistory.push(chatBox.text);
					}
					
					if (chatIndex > 0) {
						chatIndex--;
					}
					
					chatBox.text = chatHistory[chatIndex];
					moveCursorToEnd();
				}
				else if (event.keyCode == Keyboard.DOWN){
					if (chatIndex < chatHistory.length) {
						chatIndex++;
					}
					else if (chatIndex == chatHistory.length &&
							 chatBox.text.length > 0) {
						chatHistory.push(chatBox.text);
						chatIndex++;
					}
					chatBox.text = chatHistory[chatIndex];	
					moveCursorToEnd();
				}
				else if (event.keyCode == Keyboard.ESCAPE) {
					chatIndex = chatHistory.length;
					chatBox.text = "";
				}
			}
			
			private function moveCursorToEnd():void {
				chatBox.selectionBeginIndex = chatBox.selectionEndIndex = chatBox.text.length;
			}
			
			private function clearChatBox(event:TimerEvent):void {
				chatHistory.push(chatBox.text);
				chatIndex = chatHistory.length;
				chatBox.text = "";
			}
			
			private function focusChatBox():void {
				focusManager.setFocus(chatBox);
				moveCursorToEnd();
			}

			private function handleRoomMouseUp(event:MouseEvent):void {
				if (event.target is AppLoader) { return; }
				focusChatBox();
			}

			private function handleSecurityError(event:InteractivitySecurityErrorEvent):void {
				dispatchEvent(event.clone());
			}
			
			private function clearStatusMessage():void {
				client.currentRoom.clearStatusMessage();
			}
			
			private function handleBackgroundsClick():void {
				MyBackgroundsWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleObjectsClick():void {
				MyObjectsWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleGamesClick():void {
				MyGamesWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function handleMediaClick():void {
				MyMediaWindow.toggleOpen(systemManager.getSandboxRoot());
			}
			
			private function createHotspot():void {
				client.currentRoom.createHotspot();
			}
			
			private function createYoutubePlayer():void {
				client.currentRoom.createYoutubePlayer();
			}
			
			private var stateBeforeAuthorMode:String;
			
			private function handleAuthorModeDisabled(event:AuthorModeNotification):void {
				if (currentState == 'authormode') {
					currentState = stateBeforeAuthorMode;
				}
			}
			
			private function handleAuthorModeEnabled(event:AuthorModeNotification):void {
				if (currentState != 'authormode') {
					stateBeforeAuthorMode = currentState;
					currentState = 'authormode';
				}
			}
			
			private function toggleAuthorMode():void {
				if (authorModeState.enabled || !client.connected) {
					authorModeState.disableAuthorMode();
				}
				else {
					authorModeState.enableAuthorMode();
				}
			}
			
			private function toggleLogWindow():void {
				if (LogWindow.isOpen) {
					LogWindow.close();
				}
				else {
					LogWindow.open(systemManager.getSandboxRoot());
				}
			}
			
			private function handleWorldSettingsClick():void {
				if (client.currentWorld.state === WorldDefinition.STATE_READY) {
					WorldPropertiesWindow.toggleOpen(systemManager.getSandboxRoot(), client.currentRoom.id);
				}
			}
			
			private function showRoomList():void {
				if (RoomListDataGrid.closedAt && RoomListDataGrid.closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				} 
				var roomList:RoomListDataGrid = new RoomListDataGrid();
				roomList.x = stage.mouseX + 15;
				roomList.y = stage.mouseY + 15;
				PopUpManager.addPopUp(roomList, systemManager.getSandboxRoot());
			}
			
			private function showUserList():void {
				if (UserListDataGrid.closedAt && UserListDataGrid.closedAt.valueOf() > (new Date()).valueOf() - 200) {
					return;
				}
				client.currentWorld.userList.load();
				var userList:UserListDataGrid = new UserListDataGrid();
				userList.x = stage.mouseX + 15;
				userList.y = stage.mouseY + 15;
				PopUpManager.addPopUp(userList, systemManager.getSandboxRoot());
			}
			
			private function toggleWebcam():void {
				if (!client.currentUser) {
					client.naked();
					return;
				}
				var manager:WebcamBroadcastManager = client.webcamBroadcastManager;
				if (client.webcamBroadcastManager.broadcasting) {
					client.naked();
				}
				else {
					client.setVideoAvatar();
				}
			}
			
			protected function handleBottomBarMouseDown(event:MouseEvent):void {
				event.preventDefault();
				event.stopImmediatePropagation();
			}
			
		]]>
	</fx:Script>
	
	<s:BorderContainer
		borderVisible="false"
		backgroundColor="#f0f0f1"
		top="0" left="0" right="0" height="26">
		
		<s:Group left="0" verticalCenter="0">
			<s:layout>
				<s:HorizontalLayout gap="3" paddingTop="3" paddingLeft="6"
									verticalAlign="middle"/>
			</s:layout>
			
			<mx:Image
				id="backButton"
				toolTip="Go Back"
				buttonMode="{client.roomHistoryManager.canGoBack}" useHandCursor="{client.roomHistoryManager.canGoBack}"
				alpha="{client.roomHistoryManager.canGoBack ? 1 : 0.5}"
				click="client.roomHistoryManager.goBack();"
				source="@Embed(source='src/assets/icons/icon_back.png')"
				scaleContent="false"
				verticalAlign="top"
				horizontalAlign="left"
				width="17"
				height="17"
				/>
			<mx:Image
				id="forwardButton"
				toolTip="Go Forward"
				buttonMode="{client.roomHistoryManager.canGoForward}" useHandCursor="{client.roomHistoryManager.canGoForward}"
				alpha="{client.roomHistoryManager.canGoForward ? 1 : 0.5}"
				click="client.roomHistoryManager.goForward();"
				source="@Embed(source='src/assets/icons/icon_forward.png')"
				scaleContent="false"
				verticalAlign="top"
				height="17" />
			<mx:Spacer width="15" />
			
			<s:Label
				id="worldTitle"
				styleName="chatWindowWorldTitle"
				text="{client.currentWorld.name}" />
			
			<mx:Spacer width="20" />
			
			<s:Label
				click="showRoomList()"
				id="roomTitle"
				styleName="chatWindowWorldTitle"
				toolTip="Click for Area List"
				text="{client.currentRoom.name}" />
			
			<mx:Image source="@Embed(source='src/assets/icons/icon_room_list_dropdown.png')"
					  click="showRoomList()"
					  scaleContent="false"
					  verticalAlign="top"
					  width="15" height="17" />
			
			<mx:Spacer width="12" />
			
			<s:Label
				click="showUserList()"
				styleName="chatWindowVisitorsTitle"
				toolTip="Click for User List"
				text="Visitors: {client.currentWorld.userList.users.length}" />
				
			<mx:Image source="@Embed(source='src/assets/icons/icon_visitor_list_dropdown.png')"
					  click="showUserList()"
					  scaleContent="false"
					  verticalAlign="top"
					  width="15" height="17" />
			
		</s:Group>
		
		<s:HGroup
			verticalCenter="0" right="3">
			<s:HGroup id="authorIcons" visible="false" visible.authormode="true"
					  verticalAlign="middle">
				<mx:Image useHandCursor="true" buttonMode="true"
						  toolTip="Create New Area"
						  click="client.createNewRoom()"
						  source="@Embed(source='src/assets/icons/icon_new_room.png')"
						  visible="{client.currentWorld.canCreateNewRoom}"
						  includeInLayout="{client.currentWorld.canCreateNewRoom}" />
				<mx:Spacer width="10" />
				<mx:Image useHandCursor="true" buttonMode="true"
						  toolTip="Create new Door" source="@Embed(source='src/assets/icons/icon_author_door.png')"
						  click="createHotspot()" />
				<mx:Image useHandCursor="true" buttonMode="true"
						  toolTip="Backgrounds" source="@Embed(source='src/assets/icons/icon_author_bkg.png')"
						  click="handleBackgroundsClick()" />
				<mx:Image useHandCursor="true" buttonMode="true"
						  toolTip="Objects" source="@Embed(source='src/assets/icons/icon_author_object.png')"
						  click="handleObjectsClick()" />
				<mx:Image useHandCursor="true" buttonMode="true"
						  toolTip="Add YouTube Player" source="@Embed(source='src/assets/icons/YouTubeIcon.png')"
						  click="createYoutubePlayer()" />
				<s:Image  toolTip="World Settings"
						  click="handleWorldSettingsClick()"
						  useHandCursor="true" buttonMode="true"
						  source="@Embed(source='src/assets/icons/icon_room_settings.png')" />
			</s:HGroup>
			
			<s:Image toolTip="Author Mode"
					 visible="{client.canAuthor}"
					 includeInLayout="{client.canAuthor}"
					 useHandCursor="true" buttonMode="true"
					 source="@Embed(source='src/assets/icons/icon_authormode_grey.png')"
					 source.authormode="@Embed(source='src/assets/icons/icon_authormode_red.png')"
					 click="toggleAuthorMode();"/>
		</s:HGroup>
	</s:BorderContainer>
	
	
	<s:Group top="26" left="0">
		<s:layout>
			<s:VerticalLayout gap="0"/>
		</s:layout>
		
		<view1:RoomView id="roomView"
							 enabled="{client.connected}"
							 webcamBroadcastManager="{client.webcamBroadcastManager}"
							 netConnectionManager="{client.netConnectionManager}"
							 securityError="handleSecurityError(event)"
							 room="{client.currentRoom}" />
	</s:Group>
	
	<s:Group id="bottomBarContainer" bottom="0" left="0" right="0" height="26" mouseDown="handleBottomBarMouseDown(event)">
		<s:Rect id="bottomBar" bottom="0" left="0" right="0" top="0">
			<s:fill>
				<s:SolidColor color="#f0f0f1" alpha="0.55" />
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:HGroup bottom="2" left="531" gap="6" mouseUp="focusChatBox()">

		<s:Button id="logWindowButton"
				  toolTip="Open/Close Log Window"
				  click="toggleLogWindow()"
				  label="Log"
				  icon="@Embed(source='src/assets/icons/icon_log_transparent.png')"
				  styleName="logWindowButton"
				  tabEnabled="false"
				  focusEnabled="false" />
	
		<s:ToggleButton id="enableWebcamButton"
						visible="{client.webcamBroadcastManager.isCameraAvailable()}"
						includeInLayout="{client.webcamBroadcastManager.isCameraAvailable()}"
						styleName="enableWebcamButton"
						label="{client.webcamBroadcastManager.broadcasting ? 'On' : 'Off'}"
						selected="{client.webcamBroadcastManager.broadcasting}"
						toolTip="Turn Webcam On/Off"
						icon="@Embed(source='/assets/icons/icon_webcam.png')"
						tabEnabled="false"
						focusEnabled="false"
						change="toggleWebcam()"
						/>
		
		<components:WebcamControls id="webcamControls"
								   tabIndex="2"
								   toolTip="Push to Talk (F6 or PgDn)"
								   tabEnabled="{client.webcamBroadcastManager.broadcasting}"
								   visible="{client.webcamBroadcastManager.broadcasting}"
								   includeInLayout="{client.webcamBroadcastManager.broadcasting}" />

	</s:HGroup>
	
	<code:PromptingTextInput
		tabIndex="1"
		bottom="3" height="21" left="3"
		focusRect="false"
		focusAlpha="0"
		width="521"
		prompt="Type here to chat..."
		borderVisible="false"
	 	fontStyle="{client.currentRoom.selectedUser ? 'italic' : 'normal'}"
		paddingLeft="4"
		paddingTop="1"
		enabled="{client.connected}"
		id="chatBox" keyDown="handleChatKeyDown(event);" maxChars="254"/>
	
	<s:Label includeIn="connecting"
			 color="#AAAAAA" fontSize="15"
			 horizontalCenter="0" verticalCenter="0"
			 text="Connecting..." />
	
</s:Group>
