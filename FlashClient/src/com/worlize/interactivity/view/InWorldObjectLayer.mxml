<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="handleCreationComplete()"
		 clipAndEnableScrolling="true">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.model.InWorldObjectInstance;
			import com.worlize.state.AuthorModeState;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;
			
			private var viewsByInWorldObjectInstance:Dictionary = new Dictionary();
			private var _inWorldObjects:ArrayCollection;
			
			[Bindable(event='inWorldObjectsChanged')]
			public function set inWorldObjects(newValue:ArrayCollection):void {
				if (_inWorldObjects !== newValue) {
					if (_inWorldObjects !== null) {
						_inWorldObjects.removeEventListener(CollectionEvent.COLLECTION_CHANGE, handleInWorldObjectsChange);
					}
					_inWorldObjects = newValue;
					_inWorldObjects.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleInWorldObjectsChange);
					dispatchEvent(new FlexEvent('inWorldObjectsChanged'));
				}
			}
			public function get inWorldObjects():ArrayCollection {
				return _inWorldObjects;
			}
			
			private function handleInWorldObjectsChange(event:CollectionEvent):void {
				var inWorldObjectInstance:InWorldObjectInstance;
				var view:InWorldObjectView;
				if (event.kind == CollectionEventKind.ADD) {
					for each (inWorldObjectInstance in event.items) {
						view = new InWorldObjectView();
						view.inWorldObjectInstance = inWorldObjectInstance;
						viewsByInWorldObjectInstance[inWorldObjectInstance] = view;
						view.selected = (AuthorModeState.getInstance().selectedItem === inWorldObjectInstance);
						addElement(view);
					}
				}
				else if (event.kind == CollectionEventKind.REMOVE) {
					for each (inWorldObjectInstance in event.items) {
						view = viewsByInWorldObjectInstance[inWorldObjectInstance];
						if (view) {
							removeElement(view);
							delete viewsByInWorldObjectInstance[inWorldObjectInstance];
						}
					}
				}
				else if (event.kind == CollectionEventKind.RESET) {
					removeAllElements();
					viewsByInWorldObjectInstance = new Dictionary();
				}
			}
			
			private function handleCreationComplete():void {
			}
			
		]]>
	</fx:Script>
</s:Group>
