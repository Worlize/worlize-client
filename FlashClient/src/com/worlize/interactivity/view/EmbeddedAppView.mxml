<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="com.worlize.interactivity.view.*"
		  xmlns:api="com.worlize.interactivity.api.*"
		  creationComplete="handleCreationComplete()"
		  addedToStage="handleAddedToStage()"
		  removedFromStage="handleRemovedFromStage()"
		  mouseDown="handleMouseDown(event)"
		  mouseOver="handleMouseOver(event)"
		  mouseOut="handleMouseOut(event)"
		  mouseEnabled="false"
		  currentState="normal"
		  x="{appInstance.x}"
		  y="{appInstance.y}" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" stateGroups="selected" />
		<s:State name="normalError" stateGroups="error" />
		<s:State name="normalSelected" />
		<s:State name="normalSelectedError" stateGroups="error" />
		<s:State name="author" stateGroups="authorMode" />
		<s:State name="authorError" stateGroups="authorMode,error" />
		<s:State name="authorSelected" stateGroups="authorModeAndSelected" />
		<s:State name="authorSelectedError" stateGroups="authorModeAndSelected,error" />
		<s:State name="edit" stateGroups="editMode" />
		<s:State name="editError" stateGroups="editMode,error" />
		<s:State name="editSelected" stateGroups="editModeAndSelected" />
		<s:State name="editSelectedError" stateGroups="editModeAndSelected,error" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.api.AppLoader;
			import com.worlize.interactivity.api.event.AppLoaderEvent;
			import com.worlize.interactivity.api.event.ClientValidationErrorEvent;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.AppInstance;
			import com.worlize.model.InWorldObject;
			import com.worlize.model.InWorldObjectInstance;
			import com.worlize.model.RoomDefinition;
			import com.worlize.state.AuthorModeState;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.ByteArrayAsset;
			import mx.events.FlexEvent;
	
			private var _appInst:AppInstance;
			
			[Bindable(event="appInstanceChange")]
			public function set appInstance(newValue:AppInstance):void {
				if (_appInst !== newValue) {
					_appInst = newValue;
					loadApp();
					updateSelected();
					dispatchEvent(new FlexEvent("appInstanceChange"));
				}
			}
			public function get appInstance():AppInstance {
				return _appInst;
			}
			
			[Bindable]
			private var _authorMode:Boolean = false;
			
			[Bindable]
			private var _editMode:Boolean = false;
			
			[Bindable]
			private var _selected:Boolean = false;
			
			private var dragging:Boolean = false;
			
			private var startPoint:Point;
			private var startMousePos:Point;
			private var mousePos:Point;
			
			[Bindable(event="authorModeChanged")]
			public function set authorMode(newValue:Boolean):void {
				if (_authorMode != newValue) {
					_authorMode = newValue;
					updateState();
					updateSelected();
					dispatchEvent(new FlexEvent('authorModeChanged'));
				}
			}
			public function get authorMode():Boolean {
				return _authorMode;
			}
			
			[Bindable(event="editModeChanged")]
			protected function set editMode(newValue:Boolean):void {
				if (_editMode !== newValue) {
					_editMode = newValue;
					updateState();
					dispatchEvent(new FlexEvent('editModeChanged'));
				}
			}
			protected function get editMode():Boolean {
				return _editMode;
			}
			
			[Bindable(event="selectedChanged")]
			public function set selected(newValue:Boolean):void {
				if (_selected !== newValue) {
					_selected = newValue;
					updateState();
					dispatchEvent(new FlexEvent('selectedChanged'));
				}
			}
			public function get selected():Boolean {
				return _selected;
			}
			
			private function updateSelected():void {
				selected = (AuthorModeState.getInstance().selectedItem === appInstance);
			}
			
			protected function loadApp():void {
				if (appLoader.source !== null) {
					appLoader.unloadAndStop(true);
				}
				
				showLoadingSpinner();
				
				appLoader.load(_appInst);
			}
			
			private function updateState():void {
				var parts:Array = [];
				if (_editMode) {
					parts.push("edit");
				}
				else if (_authorMode) {
					parts.push("author");
				}
				else {
					parts.push("normal");
				}
				if (_selected) {
					parts.push("Selected");
				}
				if (appLoader.hasError) {
					parts.push("Error");
				}
				currentState = parts.join('');
				updateMouseEnabled();
			}
			
			private function updateMouseEnabled():void {
				if (_editMode) {
					mouseEnabled = false;
				}
				else if (_authorMode) {
					mouseEnabled = true;
				}
				else {
					mouseEnabled = false;
				}
			}
			
			private function handleCreationComplete():void {
				updateState();
			}
			
			private function handleAddedToStage():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				NotificationCenter.addListener(AuthorModeNotification.EDIT_MODE_ENABLED, handleEditModeEnabled);
				NotificationCenter.addListener(AuthorModeNotification.EDIT_MODE_DISABLED, handleEditModeDisabled);
				NotificationCenter.addListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				authorMode = AuthorModeState.getInstance().enabled;
			}
			
			private function handleRemovedFromStage():void {
				NotificationCenter.removeListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				NotificationCenter.removeListener(AuthorModeNotification.EDIT_MODE_ENABLED, handleEditModeEnabled);
				NotificationCenter.removeListener(AuthorModeNotification.EDIT_MODE_DISABLED, handleEditModeDisabled);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				
				appLoader.unloadAndStop();
			}
			
			private function handleAuthorModeEnabled(notification:AuthorModeNotification):void {
				authorMode = true;
			}
			
			private function handleAuthorModeDisabled(notification:AuthorModeNotification):void {
				authorMode = false;
			}
			
			private function handleEditModeEnabled(notification:AuthorModeNotification):void {
				if (notification.roomItem === appInstance) {
					editMode = true;
				}
			}
			
			private function handleEditModeDisabled(notification:AuthorModeNotification):void {
				editMode = false;
			}
			
			private function handleSelectedItemChanged(notification:AuthorModeNotification):void {
				selected = (notification.newValue === appInstance);
			}
			
			private function handleMouseOver(event:MouseEvent):void {
				if (_editMode) {
				
				}
				else if (_authorMode) {
					Mouse.cursor = MouseCursor.HAND;
				}
				else if (appInstance.dest) {
					Mouse.cursor = MouseCursor.BUTTON;
				}
			}
			
			private function handleMouseOut(event:MouseEvent):void {
				if ((_authorMode || appInstance.dest) && !_editMode) {
					Mouse.cursor = MouseCursor.ARROW;
				}
			}
			
			private function handleMouseDown(event:MouseEvent):void {
				if (_editMode) {
					event.stopImmediatePropagation();
				}
				else if (_authorMode) {
					dragging = true;
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
					event.stopImmediatePropagation();
					AuthorModeState.getInstance().selectedItem = this.appInstance;
					startPoint = new Point(appInstance.x, appInstance.y);
					startMousePos = new Point(parent.mouseX, parent.mouseY);
					mousePos = startMousePos.clone();
				}
				else if (appInstance.dest) {
					InteractivityClient.getInstance().gotoRoom(appInstance.dest);
				}
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				dragging = false;
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				
				if (startPoint.x != appInstance.x ||
					startPoint.y != appInstance.y)
				{
					var client:InteractivityClient = InteractivityClient.getInstance();
					client.moveItem(appInstance.guid, appInstance.x, appInstance.y);
				}
			}
			
			private function handleStageMouseMove(event:MouseEvent):void {
				if (dragging) {
					if (parent.mouseX < 0 || parent.mouseY < 0 || parent.mouseX > parent.width || parent.mouseY > parent.height) {
						return;
					}
					
					mousePos.x = parent.mouseX;
					mousePos.y = parent.mouseY;
					
					var destx:int = startPoint.x + (mousePos.x - startMousePos.x);
					var desty:int = startPoint.y + (mousePos.y - startMousePos.y);
					
					var halfWidth:int = appInstance.width >> 1;
					var halfHeight:int = appInstance.height >> 1;
					
					if (destx < 0 - halfWidth) {
						destx = 0 - halfWidth;
					}
					if (desty < 0 - halfHeight) {
						desty = 0 - halfHeight;
					}
					if (destx > 950 - halfWidth) {
						destx = 950 - halfWidth;
					}
					if (desty > 570 - 26 - halfHeight) {
						desty = 570 - 26 - halfHeight;
					}
					
					appInstance.moveLocal(destx,desty);
				}
			}
			
			protected function handleAppLoaderComplete(event:Event):void {
				
			}
			
			protected function handleAppBombed(event:AppLoaderEvent):void {
				updateState();
			}
			
			protected function handleValidationError(event:ClientValidationErrorEvent):void {
				InteractivityClient.getInstance().currentRoom.logMessage(event.text);
			}
			
			protected function handleHandshakeComplete(event:AppLoaderEvent):void {
				hideLoadingSpinner();
			}
			
			[Embed(source="src/assets/spinner.swf",mimeType="application/octet-stream")]
			protected var spinnerSWF:Class;
			
			protected var loadingSpinner:Loader;
			
			protected function showLoadingSpinner():void {
				if (loadingSpinner) {
					loadingSpinner.unloadAndStop();
				}
				loadingSpinner = new Loader();
				loadingSpinner.loadBytes(ByteArrayAsset(new spinnerSWF()));
				spinnerContainer.removeChildren();
				spinnerContainer.addChild(loadingSpinner);
			}
			
			protected function hideLoadingSpinner():void {
				loadingSpinner.unloadAndStop();
				loadingSpinner = null;
				spinnerContainer.removeChildren();
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="editModeBackground" top="-1" left="-1" right="-1" bottom="-1" includeIn="editModeAndSelected">
		<s:Rect top="-1" left="-1" right="-1" bottom="-1">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="#FFFFFF" />
			</s:stroke>
		</s:Rect>
		<s:Rect top="0" left="0" right="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="#000000" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#EEEEEE" alpha="0.25" />
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<api:AppLoader top="0" left="0" id="appLoader"
				   width="{appInstance.width}"
				   height="{appInstance.height}"
				   validationError="handleValidationError(event)"
				   appBombed="handleAppBombed(event)"
				   handshakeComplete="handleHandshakeComplete(event)"
				   complete="handleAppLoaderComplete(event)" />
	
	<s:Rect top="0" left="0" right="0" bottom="0" includeIn="error">
		<s:stroke>
			<s:SolidColorStroke weight="4" color="#700000" alpha="1" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#d0291d" alpha="0.4" />
		</s:fill>
	</s:Rect>
	
	<s:Image includeIn="error" width="64" height="64"
			 horizontalCenter="0" verticalCenter="0"
			 mouseEnabled="false" mouseChildren="false"
			 source="@Embed(source='src/assets/icons/app-bomb-64.png')" />
	
	<s:Group top="0" left="0" right="0" bottom="0" includeIn="authorMode,authorModeAndSelected">
		<s:Rect top="-1" left="-1" right="-1" bottom="-1">
			<s:stroke>
				<s:SolidColorStroke weight="3"
									color.authorMode="#FFFFFF" alpha.authorMode="0.5"
									color.authorModeAndSelected="#000000" alpha.authorModeAndSelected="1" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color.authorMode="#444444" alpha.authorMode="0.25"
							  color.authorModeAndSelected="#EEEEEE" alpha.authorModeAndSelected="0.25" />
			</s:fill>
		</s:Rect>
		<s:Rect top="0" left="0" right="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke weight="1"
									color.authorMode="#000000"
									color.authorModeAndSelected="#DDDDDD" />
			</s:stroke>
		</s:Rect>
	</s:Group>
	
	<s:SpriteVisualElement id="spinnerContainer"
						   mouseChildren="false" mouseEnabled="false"
						   width="32" height="32"
						   verticalCenter="0" horizontalCenter="0" />
</s:Group>
