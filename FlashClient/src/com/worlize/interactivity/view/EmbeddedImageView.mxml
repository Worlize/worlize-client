<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="com.worlize.interactivity.view.*"
		 xmlns:api="com.worlize.interactivity.api.*"
		 creationComplete="handleCreationComplete()"
		 addedToStage="handleAddedToStage()"
		 removedFromStage="handleRemovedFromStage()"
		 mouseDown="handleMouseDown(event)"
		 rollOver="handleRollOver(event)"
		 rollOut="handleRollOut(event)"
		 mouseEnabled="false"
		 currentState="normal"
		 x="{inWorldObjectInstance.x - (loadedWidth >> 1)}"
		 y="{inWorldObjectInstance.y - (loadedHeight >> 1)}"
	>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:filters>
		<s:GlowFilter includeIn="mouseOver" color="#f2f200" alpha="1" blurX="15" blurY="15" quality="3" />
	</s:filters>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="normalMouseOver" stateGroups="mouseOver" />
		<s:State name="normalSelected" stateGroups="selected" />
		<s:State name="normalMouseOverSelected" stateGroups="selected" />
		<s:State name="author" stateGroups="authorMode" />
		<s:State name="authorMouseOver" stateGroups="authorMode" />
		<s:State name="authorSelected" stateGroups="authorModeAndSelected" />
		<s:State name="authorMouseOverSelected" stateGroups="authorModeAndSelected" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.gif.GIFPlayer;
			import com.worlize.gif.events.AsyncDecodeErrorEvent;
			import com.worlize.gif.events.GIFPlayerEvent;
			import com.worlize.interactivity.api.AppLoader;
			import com.worlize.interactivity.api.event.AppLoaderEvent;
			import com.worlize.interactivity.api.event.ClientValidationErrorEvent;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.InWorldObject;
			import com.worlize.model.InWorldObjectInstance;
			import com.worlize.model.RoomDefinition;
			import com.worlize.state.AuthorModeState;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.ByteArrayAsset;
			import mx.events.FlexEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			
			private var _objInst:InWorldObjectInstance;
			
			private var _mouseOver:Boolean = false;
			
			[Bindable(event="inWorldObjectInstanceChange")]
			public function set inWorldObjectInstance(newValue:InWorldObjectInstance):void {
				if (_objInst !== newValue) {
					_objInst = newValue;
					loadObject();
					dispatchEvent(new FlexEvent("inWorldObjectInstanceChange"));
				}
			}
			public function get inWorldObjectInstance():InWorldObjectInstance {
				return _objInst;
			}
			
			[Bindable]
			private var loadedWidth:int = 0;
			
			[Bindable]
			private var loadedHeight:int = 0;
			
			[Bindable]
			private var _authorMode:Boolean = false;
			
			[Bindable]
			private var _selected:Boolean = false;
			
			private var dragging:Boolean = false;
			
			private var startPoint:Point;
			private var startMousePos:Point;
			private var mousePos:Point;
			
			private var loader:Loader;
			private var urlLoader:URLLoader;
			
			private var gifPlayer:GIFPlayer;
			
			private var logger:ILogger = Log.getLogger("com.worlize.interactivity.view.EmbeddedImageView");
			
			[Bindable(event="authorModeChanged")]
			public function set authorMode(newValue:Boolean):void {
				if (_authorMode != newValue) {
					_authorMode = newValue;
					updateState();
					dispatchEvent(new FlexEvent('authorModeChanged'));
				}
			}
			public function get authorMode():Boolean {
				return _authorMode;
			}
			
			[Bindable(event="selectedChanged")]
			public function set selected(newValue:Boolean):void {
				if (_selected !== newValue) {
					_selected = newValue;
					updateState();
					dispatchEvent(new FlexEvent('selectedChanged'));
				}
			}
			public function get selected():Boolean {
				return _selected;
			}
			
			protected function loadObject():void {
				showLoadingSpinner();
				
				var url:String = inWorldObjectInstance.inWorldObject.fullsizeURL;
				var gifRegex:RegExp = /^.*\.gif$/i;
				var urlRequest:URLRequest = new URLRequest(url);
				
				var context:LoaderContext = new LoaderContext(true);
				context.allowCodeImport = false;

				if (url.match(gifRegex)) {
					// Load animated gif
					urlLoader = new URLLoader();
					urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
					urlLoader.addEventListener(Event.COMPLETE, handleAnimatedGifComplete);
					urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);
					urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);
					urlLoader.load(urlRequest);
				}
				else {
					// Load normal image
					loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleNormalImageComplete);
					loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, handleIOError);
					loader.load(urlRequest, context);
				}
			}
			
			private function handleIOError(event:IOErrorEvent):void {
				logger.error("IO Error while loading object " + inWorldObjectInstance.inWorldObject.guid + ": " +
					"Error ID: " + event.errorID + " Text: " + event.text);
			}
			
			private function handleSecurityError(event:SecurityErrorEvent):void {
				logger.error("Security Error while loading object " + inWorldObjectInstance.inWorldObject.guid + ": " +
					"Error ID: " + event.errorID + " Text: " + event.text);
			}

			private function handleNormalImageComplete(event:Event):void {
				// Hide the progress bar
				hideLoadingSpinner();
				
				var image:Bitmap = loader.content as Bitmap;
				loadedWidth = imageContainer.width = image.width;
				loadedHeight = imageContainer.height = image.height;
				imageContainer.addChild(image);
			}
			
			private function handleAnimatedGifComplete(event:Event):void {
				var bytes:ByteArray = urlLoader.data as ByteArray;
				gifPlayer = new GIFPlayer();
				gifPlayer.addEventListener(GIFPlayerEvent.COMPLETE, handleGifDecoded);
				gifPlayer.addEventListener(AsyncDecodeErrorEvent.ASYNC_DECODE_ERROR, handleGifDecodeError);
				gifPlayer.loadBytes(bytes);
				return;
			}
			
			private function handleGifDecoded(event:GIFPlayerEvent):void {
				// Hide the progress bar
				hideLoadingSpinner();
				
				loadedWidth = imageContainer.width = gifPlayer.width;
				loadedHeight = imageContainer.height = gifPlayer.height;
				imageContainer.addChild(gifPlayer);
			}
			
			private function handleGifDecodeError(event:AsyncDecodeErrorEvent):void {
				// Hide the progress bar
				hideLoadingSpinner();
				logger.warn("Object " + inWorldObjectInstance.inWorldObject.guid + " - invalid or corrupted GIF data");
			}
			
			private function updateState():void {
				var parts:Array = [];
				if (_authorMode) {
					parts.push("author");
				}
				else {
					parts.push("normal");
				}
				if (_mouseOver && inWorldObjectInstance.dest) {
					parts.push("MouseOver");
				}
				if (_selected) {
					parts.push("Selected");
				}
				currentState = parts.join('');
				updateMouseEnabled();
			}
			
			private function updateMouseEnabled():void {
				if (_authorMode || inWorldObjectInstance.dest) {
					mouseEnabled = true;
				}
				else {
					mouseEnabled = true;
				}
			}
			
			private function handleCreationComplete():void {
				updateState();
			}
			
			private function handleAddedToStage():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				NotificationCenter.addListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				var authorModeState:AuthorModeState = AuthorModeState.getInstance();
				authorMode = authorModeState.enabled;
				selected = (authorModeState.selectedItem === inWorldObjectInstance);
			}
			
			private function handleRemovedFromStage():void {
				NotificationCenter.removeListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				
				if (gifPlayer) {
					gifPlayer.stop();
					gifPlayer.dispose();
					gifPlayer = null;
				}
			}
			
			private function handleAuthorModeEnabled(notification:AuthorModeNotification):void {
				authorMode = true;
			}
			
			private function handleAuthorModeDisabled(notification:AuthorModeNotification):void {
				authorMode = false;
			}

			private function handleSelectedItemChanged(notification:AuthorModeNotification):void {
				selected = (notification.newValue === inWorldObjectInstance);
			}
			
			private function handleRollOver(event:MouseEvent):void {
				_mouseOver = true;
				if (_authorMode) {
					Mouse.cursor = MouseCursor.HAND;
				}
				else if (inWorldObjectInstance.dest) {
					Mouse.cursor = MouseCursor.BUTTON;
				}
				updateState();
			}
			
			private function handleRollOut(event:MouseEvent):void {
				_mouseOver = false;
				if (_authorMode || inWorldObjectInstance.dest) {
					Mouse.cursor = MouseCursor.ARROW;
				}
				updateState();
			}
			
			private function handleMouseDown(event:MouseEvent):void {
				if (_authorMode) {
					dragging = true;
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
					event.stopImmediatePropagation();
					AuthorModeState.getInstance().selectedItem = this.inWorldObjectInstance;
					startPoint = new Point(inWorldObjectInstance.x, inWorldObjectInstance.y);
					startMousePos = new Point(parent.mouseX, parent.mouseY);
					mousePos = startMousePos.clone();
				}
				else if (inWorldObjectInstance.dest) {
					InteractivityClient.getInstance().gotoRoom(inWorldObjectInstance.dest);
				}
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				dragging = false;
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				
				if (startPoint.x != inWorldObjectInstance.x ||
					startPoint.y != inWorldObjectInstance.y)
				{
					var client:InteractivityClient = InteractivityClient.getInstance(); 
					client.moveItem(inWorldObjectInstance.guid, inWorldObjectInstance.x, inWorldObjectInstance.y);
				}
			}
			
			private function handleStageMouseMove(event:MouseEvent):void {
				if (dragging) {
					if (parent.mouseX < 0 || parent.mouseY < 0 || parent.mouseX > parent.width || parent.mouseY > parent.height) {
						return;
					}
					mousePos.x = parent.mouseX;
					mousePos.y = parent.mouseY;
					
					var destx:int = startPoint.x + (mousePos.x - startMousePos.x);
					var desty:int = startPoint.y + (mousePos.y - startMousePos.y);
					
					if (destx < 0) {
						destx = 0;
					}
					if (desty < 0) {
						desty = 0;
					}
					if (destx > 950) {
						destx = 950;
					}
					if (desty > (570-26)) {
						desty = 570-26;
					}
					
					inWorldObjectInstance.moveLocal(destx,desty);
				}
			}
			
			[Embed(source="src/assets/spinner.swf",mimeType="application/octet-stream")]
			protected var spinnerSWF:Class;
			
			protected var loadingSpinner:Loader;
			
			protected function showLoadingSpinner():void {
				if (loadingSpinner) {
					loadingSpinner.unloadAndStop();
				}
				loadingSpinner = new Loader();
				loadingSpinner.loadBytes(ByteArrayAsset(new spinnerSWF()));
				spinnerContainer.removeChildren();
				spinnerContainer.addChild(loadingSpinner);
			}
			
			protected function hideLoadingSpinner():void {
				loadingSpinner.unloadAndStop();
				loadingSpinner = null;
				spinnerContainer.removeChildren();
			}
			
		]]>
	</fx:Script>
	
	<s:SpriteVisualElement id="imageContainer" />
	
	<s:Group top="0" left="0" right="0" bottom="0" includeIn="authorMode,authorModeAndSelected">
		<s:Rect top="-1" left="-1" right="-1" bottom="-1">
			<s:stroke>
				<s:SolidColorStroke weight="3"
									color.authorMode="#FFFFFF" alpha.authorMode="0.5"
									color.authorModeAndSelected="#000000" alpha.authorModeAndSelected="1" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color.authorMode="#444444" alpha.authorMode="0.25"
							  color.authorModeAndSelected="#EEEEEE" alpha.authorModeAndSelected="0.25" />
			</s:fill>
		</s:Rect>
		<s:Rect top="0" left="0" right="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke weight="1"
									color.authorMode="#000000"
									color.authorModeAndSelected="#DDDDDD" />
			</s:stroke>
		</s:Rect>
	</s:Group>
	
	<s:SpriteVisualElement id="spinnerContainer"
						   mouseChildren="false" mouseEnabled="false"
						   x="-16" y="-16" />
</s:Group>
