<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="com.worlize.interactivity.view.*"
		  creationComplete="handleCreationComplete()"
		  addedToStage="handleAddedToStage()"
		  removedFromStage="handleRemovedFromStage()"
		  mouseDown="handleMouseDown(event)"
		  mouseOver="handleMouseOver(event)"
		  mouseOut="handleMouseOut(event)"
		  currentState="normal"
		  x="{inWorldObjectInstance.x}"
		  y="{inWorldObjectInstance.y}" xmlns:api="com.worlize.interactivity.api.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" stateGroups="selected" />
		<s:State name="normalError" stateGroups="error" />
		<s:State name="normalSelected" />
		<s:State name="normalSelectedError" stateGroups="error" />
		<s:State name="author" stateGroups="authorMode" />
		<s:State name="authorError" stateGroups="authorMode,error" />
		<s:State name="authorSelected" stateGroups="authorModeAndSelected" />
		<s:State name="authorSelectedError" stateGroups="authorModeAndSelected,error" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AuthorModeNotification;
			import com.worlize.event.NotificationCenter;
			import com.worlize.interactivity.api.AppLoader;
			import com.worlize.interactivity.api.event.AppLoaderEvent;
			import com.worlize.interactivity.api.event.ClientValidationErrorEvent;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.InWorldObject;
			import com.worlize.model.InWorldObjectInstance;
			import com.worlize.model.RoomDefinition;
			import com.worlize.state.AuthorModeState;
			
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.events.FlexEvent;
	
			private var _objInst:InWorldObjectInstance;
			
			[Bindable(event="inWorldObjectInstanceChange")]
			public function set inWorldObjectInstance(newValue:InWorldObjectInstance):void {
				if (_objInst !== newValue) {
					_objInst = newValue;
					loadObject();
					dispatchEvent(new FlexEvent("inWorldObjectInstanceChange"));
				}
			}
			public function get inWorldObjectInstance():InWorldObjectInstance {
				return _objInst;
			}
			
			[Bindable]
			private var _authorMode:Boolean = false;
			
			[Bindable]
			private var _selected:Boolean = false;
			
			private var dragging:Boolean = false;
			
			private var startPoint:Point;
			private var startMousePos:Point;
			private var mousePos:Point;
			
			[Bindable(event="authorModeChanged")]
			public function set authorMode(newValue:Boolean):void {
				if (_authorMode != newValue) {
					_authorMode = newValue;
					updateState();
					dispatchEvent(new FlexEvent('authorModeChanged'));
				}
			}
			public function get authorMode():Boolean {
				return _authorMode;
			}
			
			[Bindable(event="selectedChanged")]
			public function set selected(newValue:Boolean):void {
				if (_selected !== newValue) {
					_selected = newValue;
					updateState();
					dispatchEvent(new FlexEvent('selectedChanged'));
				}
			}
			public function get selected():Boolean {
				return _selected;
			}
			
			protected function loadObject():void {
				if (appLoader.source !== null) {
					appLoader.unloadAndStop(true);
				}
				
				if (_objInst.inWorldObject.kind === InWorldObject.KIND_APP) {
					appLoader.load(_objInst);
				}
			}
			
			private function updateState():void {
				var parts:Array = [];
				if (_authorMode) {
					parts.push("author");
				}
				else {
					parts.push("normal");
				}
				if (_selected) {
					parts.push("Selected");
				}
				if (appLoader.hasError) {
					parts.push("Error");
				}
				currentState = parts.join('');
			}
			
			private function handleCreationComplete():void {
				updateState();
			}
			
			private function handleAddedToStage():void {
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.addListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				NotificationCenter.addListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				authorMode = AuthorModeState.getInstance().enabled;
			}
			
			private function handleRemovedFromStage():void {
				NotificationCenter.removeListener(AuthorModeNotification.SELECTED_ITEM_CHANGED, handleSelectedItemChanged);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_ENABLED, handleAuthorModeEnabled);
				NotificationCenter.removeListener(AuthorModeNotification.AUTHOR_DISABLED, handleAuthorModeDisabled);
				
				appLoader.unloadAndStop();
			}
			
			private function handleAuthorModeEnabled(notification:AuthorModeNotification):void {
				authorMode = true;
			}
			
			private function handleAuthorModeDisabled(notification:AuthorModeNotification):void {
				authorMode = false;
			}
			
			private function handleSelectedItemChanged(notification:AuthorModeNotification):void {
				selected = (notification.newValue === inWorldObjectInstance);
			}
			
			private function handleMouseOver(event:MouseEvent):void {
				if (_authorMode) {
					Mouse.cursor = MouseCursor.HAND;
				}
				else if (inWorldObjectInstance.dest) {
					Mouse.cursor = MouseCursor.BUTTON;
				}
			}
			
			private function handleMouseOut(event:MouseEvent):void {
				if (_authorMode || inWorldObjectInstance.dest) {
					Mouse.cursor = MouseCursor.ARROW;
				}
			}
			
			private function handleMouseDown(event:MouseEvent):void {
				if (_authorMode) {
					dragging = true;
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
					systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
					event.stopImmediatePropagation();
					AuthorModeState.getInstance().selectedItem = this.inWorldObjectInstance;
					startPoint = new Point(inWorldObjectInstance.x, inWorldObjectInstance.y);
					startMousePos = new Point(parent.mouseX, parent.mouseY);
					mousePos = new Point(parent.mouseX, parent.mouseY);
				}
				else if (inWorldObjectInstance.dest) {
					InteractivityClient.getInstance().gotoRoom(inWorldObjectInstance.dest);
				}
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				dragging = false;
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				
				if (startPoint.x != inWorldObjectInstance.x ||
					startPoint.y != inWorldObjectInstance.y)
				{
					var roomDefinition:RoomDefinition = new RoomDefinition();
					roomDefinition.guid = inWorldObjectInstance.room.guid 
					roomDefinition.moveObjectInstance(inWorldObjectInstance.guid, inWorldObjectInstance.x, inWorldObjectInstance.y);
				}
			}
			
			private function handleStageMouseMove(event:MouseEvent):void {
				if (dragging) {
					mousePos.x = parent.mouseX;
					mousePos.y = parent.mouseY;
					
					var destx:int = startPoint.x + (mousePos.x - startMousePos.x);
					var desty:int = startPoint.y + (mousePos.y - startMousePos.y);
					
					if (destx < 0) {
						destx = 0;
					}
					if (desty < 0) {
						desty = 0;
					}
					if (destx > 950) {
						destx = 950;
					}
					if (desty > (570-26)) {
						desty = 570-26;
					}
					
					inWorldObjectInstance.moveLocal(destx,desty);
				}
			}
			
			protected function handleAppLoaderComplete(event:Event):void {
				trace("App Loader Dimensions: " + appLoader.width + "x" + appLoader.height);
			}
			
			protected function handleAppBombed(event:AppLoaderEvent):void {
				updateState();
			}
			
			protected function handleValidationError(event:ClientValidationErrorEvent):void {
				InteractivityClient.getInstance().currentRoom.logMessage(event.text);
			}
			
		]]>
	</fx:Script>
	
	<api:AppLoader top="0" left="0" id="appLoader"
				   width="{inWorldObjectInstance.width}"
				   height="{inWorldObjectInstance.height}"
				   validationError="handleValidationError(event)"
				   appBombed="handleAppBombed(event)"
				   complete="handleAppLoaderComplete(event)" />
	
	<s:Rect top="0" left="0" right="0" bottom="0" includeIn="error">
		<s:stroke>
			<s:SolidColorStroke weight="4" color="#700000" alpha="1" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#d0291d" alpha="0.4" />
		</s:fill>
	</s:Rect>
	
	<s:Image includeIn="error" width="64" height="64"
			 horizontalCenter="0" verticalCenter="0"
			 mouseEnabled="false" mouseChildren="false"
			 source="@Embed(source='src/assets/icons/app-bomb-64.png')" />
	
	<s:Group top="0" left="0" right="0" bottom="0" includeIn="authorMode,authorModeAndSelected">
		<s:Rect top="-1" left="-1" right="-1" bottom="-1">
			<s:stroke>
				<s:SolidColorStroke weight="3"
									color.authorMode="#FFFFFF" alpha.authorMode="0.5"
									color.authorModeAndSelected="#000000" alpha.authorModeAndSelected="1" />
			</s:stroke>
			<s:fill>
				<s:SolidColor color.authorMode="#444444" alpha.authorMode="0.25"
							  color.authorModeAndSelected="#EEEEEE" alpha.authorModeAndSelected="0.25" />
			</s:fill>
		</s:Rect>
		<s:Rect top="0" left="0" right="0" bottom="0">
			<s:stroke>
				<s:SolidColorStroke weight="1"
									color.authorMode="#000000"
									color.authorModeAndSelected="#DDDDDD" />
			</s:stroke>
		</s:Rect>
	</s:Group>
	
</s:Group>
