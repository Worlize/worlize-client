<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fx="http://ns.adobe.com/mxml/2009"
	x="{user.x-25}" y="{user.y-25}"
	height="50"
	width="50"
	mouseEnabled="false"
	creationComplete="handleCreationComplete()"
	xmlns:view="com.worlize.interactivity.view.*"
	xmlns:mx1="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		[Event(name="showContextMenu",type="com.worlize.interactivity.event.AvatarSelectEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.event.AvatarEvent;
			import com.worlize.gif.GIFPlayer;
			import com.worlize.gif.events.AsyncDecodeErrorEvent;
			import com.worlize.gif.events.GIFPlayerEvent;
			import com.worlize.interactivity.event.AvatarSelectEvent;
			import com.worlize.interactivity.model.InteractivityUser;
			import com.worlize.interactivity.model.WebcamBroadcastManager;
			import com.worlize.interactivity.rpc.InteractivityClient;
			import com.worlize.model.CurrentUser;
			import com.worlize.model.SimpleAvatar;
			import com.worlize.video.control.NetConnectionManager;
			
			import flash.filters.GlowFilter;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.core.FlexBitmap;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.PropertyChangeEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			
			import spark.effects.Fade;
			import spark.layouts.BasicLayout;
			[Bindable]
			public var user:InteractivityUser = new InteractivityUser();
			
			[Bindable]
			public var netConnectionManager:NetConnectionManager;
			
			[Bindable]
			public var webcamBroadcastManager:WebcamBroadcastManager;
			
			public function get avatarHeight():Number {
				if (user.videoAvatarStreamName) {
					return 120;
				}
				else if (user.showFace) {
					return 50;
				}
				return imageContainer.height;
			}
			
			public function get avatarWidth():Number {
				if (user.videoAvatarStreamName) {
					return 160;
				}
				else if (user.showFace) {
					return 50;
				}
				return imageContainer.width;
			}
			
			private var video:Video;
			
			private var loader:Loader;
			private var urlLoader:URLLoader;
			
			private var gifPlayer:GIFPlayer;
			
			private var currentSimpleAvatar:SimpleAvatar;
			
			private var logger:ILogger = Log.getLogger("com.worlize.interactivity.view.Avatar");
			
			public static var chatBubbleTintColors:Array = [
				0xFF9999, // 0  Red
				0xFF9966, // 1  Orange
				0xFFCC88, // 2  Gold
				0xFFEE99, // 3  Yellow
				0xD0F29F, // 4  Yellow-Green
				0xB9F29F, // 5  Green
				0xAFF2AE, // 6  Green 2
				0xC4F4DE, // 7  Green-Cyan
				0xA9EEF1, // 8  Cyan
				0x8DD2FF, // 9  Cyan-Blue
				0x86ABFF, // 10 Blue
				0x8F86FF, // 11 Blue-Violet
				0xAB86FF, // 12 Violet
				0xEF86FF, // 13 Magenta
				0xFF86E4, // 14 Magenta-Rose
				0xFF86B1  // 15 Rose
			]; 
			
			private function handleCreationComplete():void {
				ChangeWatcher.watch(this, ['user','simpleAvatar'], handleAvatarChanged);
				ChangeWatcher.watch(this, ['user','videoAvatarStreamName'], handleAvatarChanged);
				checkAvatar();
				
				hitSprite.width = 50;
				hitSprite.height = 50;
				hitSprite.graphics.beginFill(0xFFFFFF, 0.0);
				hitSprite.graphics.drawRect(0,0,50,50);
				hitSprite.graphics.endFill();
				hitSprite.x = 0;
				hitSprite.y = 5;
			}
			
			private function handleAvatarChanged(event:PropertyChangeEvent):void {
				removeSimpleAvatarListeners();
				checkAvatar();
			}
			
			private function removeSimpleAvatarListeners():void {
				if (currentSimpleAvatar) {
					// Remove the old event listeners in case the user changed
					// to a new avatar before the previous one finished loading.
					currentSimpleAvatar.removeEventListener(AvatarEvent.AVATAR_LOADED, handleSimpleAvatarLoaded);
					currentSimpleAvatar.removeEventListener(AvatarEvent.AVATAR_ERROR, handleSimpleAvatarError);
				}
			}

			private function checkAvatar():void {
				if (user && user.videoAvatarStreamName !== null) {
					// Video avatar
					user.showFace = false;
					imageContainer.removeChildren();
					// Actual video playback is driven by data bindings
				}
				if (user && user.simpleAvatar && !user.simpleAvatar.error) {
					// Simple avatar
					currentSimpleAvatar = user.simpleAvatar;
					
					// Remove old avatar
					imageContainer.removeChildren();
					if (gifPlayer) {
						gifPlayer.dispose();
					}
					
					user.showFace = false;
					if (currentSimpleAvatar.ready) {
						loadAvatarImage();
					}
					else {
						// Show the progress bar.
						simpleAvatarProgressBar.setProgress(0, 100);
						simpleAvatarProgressBar.visible = true;

						currentSimpleAvatar.addEventListener(AvatarEvent.AVATAR_LOADED, handleSimpleAvatarLoaded);
						currentSimpleAvatar.addEventListener(AvatarEvent.AVATAR_ERROR, handleSimpleAvatarError);
					}
				}
				else {
					// No avatar.  Show default jelly.
					
					user.showFace = true;
					imageContainer.removeChildren();
					simpleAvatarProgressBar.visible = false;
				}
			}
			
			private function handleSimpleAvatarLoaded(event:AvatarEvent):void {
				loadAvatarImage();
				SimpleAvatar(event.target).removeEventListener(AvatarEvent.AVATAR_LOADED, handleSimpleAvatarLoaded);
			}
			
			private function handleSimpleAvatarError(event:AvatarEvent):void {
				user.showFace = true;
				simpleAvatarProgressBar.visible = false;
			}
			
			private function loadAvatarImage():void {
				// Show the progress bar.
				simpleAvatarProgressBar.setProgress(10, 100);
				simpleAvatarProgressBar.visible = true;

				var url:String = user.simpleAvatar.mediumURL;
				var gifRegex:RegExp = /^.*\.gif$/i;
				var urlRequest:URLRequest = new URLRequest(url);
				
				var context:LoaderContext = new LoaderContext(true);
				context.allowCodeImport = false;
				
				// If changing avatars quickly, the loader might be changed out
				// from underneath the app before the image finishes loading,
				// and then the event handler would try to refer to a null
				// object and blow up.
				if (urlLoader) {
					urlLoader.removeEventListener(ProgressEvent.PROGRESS, handleLoaderProgress);
					urlLoader.removeEventListener(Event.COMPLETE, handleAnimatedGifComplete);
				}
				if (loader) {
					loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, handleLoaderProgress);
					loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, handleNormalImageComplete);
				}
				
				// Start loading avatar
				if (url.match(gifRegex)) {
					// Load animated gif
					urlLoader = new URLLoader();
					urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
					urlLoader.addEventListener(ProgressEvent.PROGRESS, handleLoaderProgress);
					urlLoader.addEventListener(Event.COMPLETE, handleAnimatedGifComplete);
					urlLoader.load(urlRequest);
				}
				else {
					// Load normal image
					loader = new Loader();
					loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, handleLoaderProgress);
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleNormalImageComplete);
					loader.load(urlRequest, context);
				}
			}
			
			private function handleLoaderProgress(event:ProgressEvent):void {
				simpleAvatarProgressBar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			private function handleNormalImageComplete(event:Event):void {
				// Hide the progress bar
				simpleAvatarProgressBar.visible = false;
				
				var image:Bitmap = loader.content as Bitmap;
				imageContainer.width = image.width;
				imageContainer.height = image.height;
				imageContainer.addChild(image);
			}
			
			private function handleAnimatedGifComplete(event:Event):void {
				var bytes:ByteArray = urlLoader.data as ByteArray;
				gifPlayer = new GIFPlayer();
				gifPlayer.addEventListener(GIFPlayerEvent.COMPLETE, handleGifDecoded);
				gifPlayer.addEventListener(AsyncDecodeErrorEvent.ASYNC_DECODE_ERROR, handleGifDecodeError);
				gifPlayer.loadBytes(bytes);
				return;
			}
			
			private function handleGifDecoded(event:GIFPlayerEvent):void {
				// Hide the progress bar
				simpleAvatarProgressBar.visible = false;
				
				imageContainer.width = gifPlayer.width;
				imageContainer.height = gifPlayer.height;
				imageContainer.addChild(gifPlayer);
			}
			
			private function handleGifDecodeError(event:AsyncDecodeErrorEvent):void {
				// Hide the progress bar
				simpleAvatarProgressBar.visible = false;
				user.showFace = true;
				
				logger.warn("User " + user.id + " - " + user.name + " - wore invalid or corrupted GIF avatar, guid: " + currentSimpleAvatar.guid);
			}

			private function handleMouseOver(event:MouseEvent):void {
				if (!user.isSelf) {
					Mouse.cursor = MouseCursor.BUTTON;
					this.filters = [
						new GlowFilter(0x000000, 1, 3, 3, 3),
						new GlowFilter(0x5ff2ff, 1, 20, 20, 2)
					];
					Mouse.cursor = MouseCursor.BUTTON;
				}
				else {
					Mouse.cursor = MouseCursor.AUTO;
				}
			}
			
			private function handleMouseOut(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.ARROW;
				if (!user.isSelf) {
					this.filters = [];
				}
				Mouse.cursor = MouseCursor.AUTO;
			}
			
			private function handleHitSpriteMouseDown(event:MouseEvent):void {
				if (!user.isSelf) {
					event.stopPropagation();
					trace("Requesting context menu.");
					var contextEvent:AvatarSelectEvent = new AvatarSelectEvent(AvatarSelectEvent.SHOW_CONTEXT_MENU);
					contextEvent.userId = user.id;
					dispatchEvent(contextEvent);
				}
			}

		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<s:Group x="0" y="5" width="50" height="40"
			 mouseEnabled="false"
			 mouseChildren="false"
			 visible="{user.showFace}">
		<mx1:Image smoothBitmapContent="true" source="{user.faceImage}" />
	</s:Group>
	
	<s:SpriteVisualElement id="imageContainer"
						   mouseEnabled="false"
						   mouseChildren="false"
						   width="200" height="200"
						   bottom="0" horizontalCenter="0" />
	
	<mx1:ProgressBar horizontalCenter="0" verticalCenter="10"
					 label=""
					 mode="manual"
					 mouseEnabled="false"
					 height="20" width="50"
					 id="simpleAvatarProgressBar" visible="false" />

	<view:VideoAvatarPlayer id="videoAvatarPlayer" width="160" height="120"
							verticalCenter="-40" horizontalCenter="0"
							netConnectionManager="{netConnectionManager}"
							webcamBroadcastManager="{webcamBroadcastManager}"
							streamName="{user.videoAvatarStreamName}"
							visible="{videoAvatarPlayer.playing}"
							includeInLayout="{videoAvatarPlayer.playing}"
							mouseChildren="false"
							mouseEnabled="false" />

	<s:SpriteVisualElement id="hitSprite"
						   mouseDown="handleHitSpriteMouseDown(event)"
						   mouseOver="handleMouseOver(event)" mouseOut="handleMouseOut(event)"/>
	
</s:Group>
