<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 x="{hotspot.location.x + point.x}"
		 y="{hotspot.location.y + point.y}"
		 creationComplete="handleCreationComplete()"
		 mouseOver="handleMouseOver(event)"
		 mouseOut="handleMouseOut(event)"
		 currentState="normal"
		 width="6" height="6" xmlns:command="org.openpalace.iptscrae.command.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hover" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.worlize.interactivity.model.FlexPoint;
			import com.worlize.interactivity.model.Hotspot;
			
			private function handleCreationComplete():void {
				addEventListeners();
			}
			
			private function handleMouseOver(event:MouseEvent):void {
				currentState="hover";
			}
			
			private function handleMouseOut(event:MouseEvent):void {
				currentState="normal";
			}
			
			private var _hotspot:Hotspot;
			
			[Bindable(event='hotspotChanged')]
			public function set hotspot(newValue:Hotspot):void {
				if (_hotspot !== newValue) {
					_hotspot = newValue;
					updatePoint();
					dispatchEvent(new Event('hotspotChanged'));
				}
			}
			public function get hotspot():Hotspot {
				return _hotspot;
			}
			
			private var _pointIndex:int;
			
			[Bindable(event='pointIndexChanged')]
			public function set pointIndex(newValue:int):void {
				if (_pointIndex != newValue) {
					_pointIndex = newValue;
					updatePoint();
					dispatchEvent(new Event('pointIndexChanged'));
				}
			}
			public function get pointIndex():int {
				return _pointIndex;
			}
			
			
			[Bindable]
			public var point:FlexPoint;
			
			private function updatePoint():void {
				point = new FlexPoint();
				var originalPoint:Point = Point(_hotspot.polygon[pointIndex]);
				if (originalPoint) {
					point.x = originalPoint.x;
					point.y = originalPoint.y;
				}
				else {
					point.x = point.y = 0;
				}
			}
			
			private function addEventListeners():void {
				addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
			}
			
			private var dragging:Boolean = false;
			private var startMousePoint:Point;
			private var startPoint:Point;
			
			private function handleMouseDown(event:MouseEvent):void {
				event.stopImmediatePropagation();
				startPoint = new Point(point.x, point.y);
				startMousePoint = new Point(parent.mouseX, parent.mouseY);
				
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				addEventListener(Event.ENTER_FRAME, handleEnterFrame);
				addEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage);
			}
			
			private function handleStageMouseMove(evnet:MouseEvent):void {
				dragging = true;
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
			}
			
			private function handleStageMouseUp(event:MouseEvent):void {
				if (dragging) {
					dragging = false;
					hotspot.savePosition();
				}
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				removeEventListener(Event.ENTER_FRAME, handleEnterFrame);
				removeEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage);
			}
			
			private function handleEnterFrame(event:Event):void {
				if (dragging) {
					var destPoint:Point = new Point();
					point.x = destPoint.x = startPoint.x + (parent.mouseX - startMousePoint.x);
					point.y = destPoint.y = startPoint.y + (parent.mouseY - startMousePoint.y);
					
					if (hotspot.location.x + point.x < 0) {
						point.x = destPoint.x = 0 - hotspot.location.x;
					}
					else if (hotspot.location.x + point.x > 950) {
						point.x = destPoint.x = 950 - hotspot.location.x;
					}
					if (hotspot.location.y + point.y < 0) {
						point.y = destPoint.y = 0 - hotspot.location.y;
					}
					else if (hotspot.location.y + point.y > 570-26) {
						point.y = destPoint.y = 570-26 - hotspot.location.y;
					}
					
					var hotspotPoint:Point = Point(hotspot.polygon[pointIndex]);
					if (hotspotPoint) {
						hotspotPoint.x = destPoint.x;
						hotspotPoint.y = destPoint.y;
						hotspot.requestRedraw();
					}
				}
			}
			
			private function handleRemovedFromStage(event:Event):void {
				dragging = false;
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, handleStageMouseUp);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMove);
				removeEventListener(Event.ENTER_FRAME, handleEnterFrame);
				removeEventListener(Event.REMOVED_FROM_STAGE, handleRemovedFromStage);
			}
			
		]]>
	</fx:Script>
	
	<s:Rect top="-3" left="-3" width="6" height="6">
		<s:stroke>
			<s:SolidColorStroke color="#FFFFFF" color.hover="#000000" weight="1" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#000000" color.hover="#FFFFFF" />
		</s:fill>
	</s:Rect>
	
</s:Group>
